var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.111,1,1.981]],["body/controllers/AppController.html",[0,1.843,1,3.285,2,1.642,3,0.385,4,0.385,5,0.327,6,3.495,7,0.508,8,2.203,9,4.832,10,1.377,11,0.034,12,0.962,13,4.204,14,1.796,15,0.789,16,0.789,17,1.154,18,2.876,19,3.495,20,0.385,21,0.271,22,2.679,23,3.028,24,1.796,25,4.204,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.018,29,1.981]],["body/modules/AppModule.html",[1,3.175,2,1.728,3,0.303,4,0.303,5,0.257,11,0.035,16,0.905,17,0.909,18,2.941,19,2.753,20,0.303,21,0.214,26,0.024,27,0.024,28,1.631,29,3.916,30,1.552,31,1.415,32,1.891,33,1.891,34,1.552,35,2.845,36,1.891,37,2.753,38,2.753,39,2.753,40,3.255,41,3.255,42,3.255,43,2.526,44,1.891,45,1.891,46,3.312,47,2.819,48,3.312,49,3.312,50,3.312,51,3.312,52,3.312,53,2.753,54,2.11,55,1.415,56,3.312,57,3.312,58,3.588,59,3.312,60,0.507,61,3.312,62,2.753,63,3.312,64,3.312,65,3.312]],["title/injectables/AppService.html",[18,1.603,66,1.214]],["body/injectables/AppService.html",[3,0.4,4,0.4,5,0.34,7,0.528,8,2.255,9,4.897,11,0.034,12,1,14,1.867,15,0.808,16,0.669,17,1.2,18,2.723,20,0.4,21,0.282,24,1.867,26,0.028,27,0.028,66,2.061,67,2.495,68,3.633,69,4.37,70,4.37,71,4.37]],["title/classes/CreateEventDTO.html",[21,0.2,72,1.603]],["body/classes/CreateEventDTO.html",[3,0.296,4,0.296,5,0.252,7,0.392,10,1.855,11,0.034,12,1.297,15,0.913,16,0.496,20,0.399,21,0.318,26,0.023,27,0.023,60,0.867,72,2.249,73,1.851,74,2.334,75,1.197,76,3.359,77,3.359,78,2.814,79,3.359,80,3.359,81,3.359,82,4.097,83,3.241,84,3.61,85,3.625,86,3.241,87,1.197,88,3.241,89,3.241,90,3.241,91,3.241,92,3.241,93,3.902,94,3.689,95,3.625,96,4.573,97,1.851,98,1.672]],["title/entities/EventEntity.html",[99,1.456,100,1.328]],["body/entities/EventEntity.html",[3,0.249,4,0.249,5,0.212,7,0.329,10,1.808,11,0.035,12,1.264,15,0.864,16,0.417,20,0.249,21,0.176,26,0.021,27,0.021,58,3.868,60,0.845,75,1.062,76,2.866,77,2.866,78,2.568,79,3.294,80,2.866,81,3.294,84,3.119,87,1.062,99,2.294,100,1.653,101,1.556,102,2.266,103,2.107,104,2.386,105,2.786,106,3.868,107,2.786,108,2.795,109,1.419,110,4.497,111,2.725,112,2.091,113,4.193,114,2.725,115,3.216,116,4.069,117,4.464,118,2.725,119,3.239,120,2.725,121,3.216,122,2.725,123,2.725,124,2.786,125,2.725,126,1.277,127,4.497]],["title/interfaces/EventInterface.html",[128,1.214,129,1.775]],["body/interfaces/EventInterface.html",[3,0.286,4,0.286,5,0.243,7,0.378,11,0.034,15,0.932,20,0.286,26,0.023,27,0.023,60,0.878,75,1.17,76,3.313,77,3.313,78,2.968,79,3.574,80,3.313,81,3.574,84,3.574,87,1.329,103,2.269,104,2.408,105,2.256,108,2.433,109,1.54,112,2.221,115,3.543,116,4.321,117,4.663,121,3.543,124,3.069,128,1.664,129,2.433,130,1.789,131,2.604,132,3.132,133,3.132,134,2.256]],["title/controllers/EventsController.html",[0,1.111,135,1.981]],["body/controllers/EventsController.html",[0,1.333,2,0.775,3,0.181,4,0.181,5,0.154,7,0.24,8,1.306,10,1.482,11,0.035,12,1.036,14,2.303,15,0.852,16,0.693,17,0.544,20,0.181,21,0.128,22,1.264,24,2.344,26,0.016,27,0.016,60,0.641,72,2.335,98,2.335,103,2.121,104,2.457,107,3.706,109,1.313,112,1.791,129,1.132,134,3.018,135,1.948,136,1.649,137,1.429,138,3.26,139,2.202,140,3.057,141,2.541,142,2.723,143,3.057,144,4.191,145,2.541,146,3.057,147,3.101,148,1.983,149,2.686,150,1.983,151,2.541,152,2.162,153,1.964,154,3.484,155,3.057,156,2.377,157,2.541,158,1.983,159,4.143,160,1.649,161,3.057,162,1.983,163,3.669,164,2.541,165,1.983,166,3.057,167,1.983,168,3.057,169,2.202,170,1.868,171,1.924,172,1.649,173,3.057,174,1.983,175,2.162,176,2.541,177,2.202,178,3.048,179,1.429,180,1.264,181,1.429,182,1.924,183,1.649,184,1.649,185,1.649,186,1.983,187,1.983,188,1.983,189,1.983,190,1.983,191,1.983,192,1.649,193,1.577,194,1.983,195,2.541,196,1.577,197,1.264,198,1.948,199,1.983,200,1.983,201,1.429]],["title/modules/EventsModule.html",[28,1.018,40,1.775]],["body/modules/EventsModule.html",[2,1.849,3,0.336,4,0.336,5,0.285,11,0.034,16,0.898,17,1.008,20,0.336,21,0.237,26,0.025,27,0.025,28,1.876,30,1.72,31,1.569,32,2.096,33,2.096,34,1.72,35,2.992,36,2.096,40,3.349,43,2.703,44,2.096,45,2.096,47,2.34,54,2.34,55,1.569,100,1.569,103,1.72,104,1.849,135,3.651,182,3.119,183,3.052,202,3.052,203,3.052,204,3.671,205,4.734,206,3.671,207,3.052,208,1.692,209,2.096,210,3.671]],["title/injectables/EventsService.html",[66,1.214,182,1.603]],["body/injectables/EventsService.html",[0,0.975,3,0.157,4,0.157,5,0.133,7,0.207,8,1.165,11,0.035,12,1.03,14,2.092,15,0.822,16,0.75,17,0.471,20,0.157,21,0.111,24,1.805,26,0.015,27,0.015,55,0.733,60,0.647,66,1.065,67,0.979,72,2.179,78,0.979,98,2.179,100,0.733,103,1.98,104,2.393,105,1.965,107,3.241,108,3.014,109,1.474,112,1.805,126,0.804,129,1.939,134,2.788,138,3.241,139,1.965,141,2.268,142,2.771,145,2.268,147,2.268,152,2.179,153,1.98,154,3.218,156,3.007,157,2.268,159,3.512,160,2.268,163,3.63,164,2.268,171,1.752,172,2.268,175,1.407,176,2.268,178,2.867,180,1.093,181,1.235,182,1.407,184,1.426,185,1.426,193,2.179,207,1.426,208,0.613,209,0.979,211,1.426,212,1.965,213,2.728,214,2.728,215,3.871,216,2.728,217,2.788,218,1.715,219,3.634,220,2.446,221,1.715,222,2.728,223,2.824,224,2.728,225,1.715,226,1.715,227,1.715,228,2.728,229,1.715,230,2.728,231,2.728,232,4.499,233,1.715,234,2.268,235,1.235,236,1.235,237,1.426,238,1.965,239,1.235,240,2.412,241,1.451,242,1.235,243,1.715,244,2.467,245,2.21,246,2.446,247,1.715,248,1.715,249,1.715,250,2.728,251,2.728,252,2.164,253,1.715,254,1.715,255,1.715,256,1.235,257,1.715,258,1.715,259,1.715,260,1.715,261,1.715,262,1.093,263,1.715,264,1.235,265,1.426]],["title/interfaces/LoginResponse.html",[128,1.214,266,1.775]],["body/interfaces/LoginResponse.html",[3,0.351,4,0.351,5,0.298,7,0.463,11,0.034,15,0.969,20,0.445,26,0.026,27,0.026,60,0.889,75,1.336,87,1.468,109,1.336,128,1.901,130,2.189,170,2.197,196,2.901,241,1.638,266,2.779,267,2.761,268,3.584,269,3.101,270,2.443,271,2.28,272,2.28,273,1.901,274,1.796,275,2.761,276,2.761]],["title/entities/ParticipantEntity.html",[99,1.456,277,1.775]],["body/entities/ParticipantEntity.html",[3,0.324,4,0.324,5,0.275,7,0.428,10,1.788,11,0.034,12,1.25,15,0.708,16,0.788,20,0.324,21,0.228,26,0.025,27,0.025,60,0.836,75,1.27,87,1.27,99,2.168,100,2.333,101,2.023,104,2.012,109,1.414,113,3.71,119,3.71,126,1.66,153,2.168,170,2.012,208,1.952,209,2.023,241,2.201,277,2.641,278,2.945,279,4.626,280,3.846,281,3.543,282,3.543,283,3.543,284,2.641,285,3.543,286,5.151,287,5.151,288,2.552]],["title/interfaces/ParticipantInterface.html",[128,1.214,289,2.238]],["body/interfaces/ParticipantInterface.html",[3,0.379,4,0.379,5,0.322,7,0.501,11,0.033,15,0.848,20,0.379,26,0.027,27,0.027,60,0.886,75,1.403,87,1.713,109,1.588,128,1.619,130,2.368,170,2.259,280,4.809,284,3.303,289,3.682,290,3.447]],["title/controllers/ParticipantsController.html",[0,1.111,291,1.981]],["body/controllers/ParticipantsController.html",[0,0.562,2,0.614,3,0.144,4,0.144,5,0.122,7,0.19,8,1.086,10,1.324,11,0.035,12,0.925,14,1.727,15,0.864,16,0.389,17,0.431,20,0.144,21,0.101,22,1.001,23,1.132,24,1.848,26,0.017,27,0.014,60,0.75,62,3.06,87,1.345,104,1.437,109,0.698,112,1.727,137,1.132,139,2.911,142,2.826,149,1.132,152,2.085,153,1.894,163,3.022,169,2.911,170,1.852,171,1.899,175,2.231,177,2.911,178,1.001,179,1.132,192,1.306,193,2.085,196,1.652,197,1.001,198,1.62,201,1.132,212,2.911,235,3.116,240,1.452,241,2.15,244,3.28,245,2.873,269,2.345,271,1.725,272,1.725,273,1.437,284,2.873,291,1.62,292,1.306,293,3.361,294,2.114,295,2.663,296,2.114,297,3.203,298,3.203,299,1.306,300,2.114,301,1.571,302,1.306,303,2.543,304,1.571,305,1.306,306,2.543,307,1.571,308,1.571,309,2.543,310,1.571,311,1.571,312,2.543,313,1.571,314,3.06,315,1.899,316,1.306,317,1.571,318,1.571,319,2.663,320,4.361,321,4.326,322,1.571,323,2.576,324,2.543,325,2.911,326,3.06,327,4.042,328,1.571,329,1.571,330,1.571,331,2.911,332,4.183,333,2.543,334,4.042,335,1.571,336,3.361,337,4.042,338,2.307,339,1.571,340,1.571,341,1.306,342,1.571,343,1.571,344,1.571,345,1.571,346,1.571,347,1.571,348,1.306,349,1.571,350,2.543,351,1.306,352,1.571,353,1.571,354,1.571,355,1.571,356,1.831,357,1.571,358,1.571,359,1.571,360,1.571,361,1.571,362,1.571,363,2.543,364,1.571,365,1.571,366,1.306,367,1.571,368,1.571,369,1.571,370,1.571,371,1.571]],["title/modules/ParticipantsModule.html",[28,1.018,41,1.775]],["body/modules/ParticipantsModule.html",[2,1.871,3,0.342,4,0.342,5,0.291,11,0.034,16,0.917,17,1.026,20,0.342,21,0.241,26,0.026,27,0.026,28,1.731,30,1.752,31,1.597,32,2.135,33,2.135,34,1.752,35,3.018,36,2.135,41,3.366,43,2.735,44,2.135,45,2.135,47,2.383,54,2.383,55,1.597,100,2.046,208,1.712,209,2.135,277,2.135,288,2.693,291,3.368,315,3.041,316,3.108,372,3.108,373,3.108,374,3.739,375,3.739,376,3.108,377,3.739]],["title/injectables/ParticipantsService.html",[66,1.214,315,1.603]],["body/injectables/ParticipantsService.html",[3,0.131,4,0.131,5,0.111,7,0.173,8,1.006,11,0.035,12,0.947,14,1.644,15,0.848,16,0.634,17,0.393,20,0.131,21,0.092,23,1.03,24,1.283,26,0.013,27,0.013,55,0.611,60,0.747,66,0.92,67,0.817,87,1.3,100,0.611,101,0.817,104,2.245,108,2.499,109,1.255,112,1.769,126,0.67,142,2.763,151,1.189,152,2.135,153,1.94,156,3.109,163,3.019,170,1.709,171,0.738,175,1.795,193,2.634,197,1.501,208,0.511,209,0.817,217,1.696,219,3.514,220,2.162,223,2.496,235,1.03,236,1.03,237,1.189,238,2.162,239,1.03,240,2.705,241,2.424,242,1.696,244,3.494,245,2.916,246,3.601,252,0.912,256,1.03,262,0.912,264,1.03,265,1.958,269,2.218,271,1.104,272,1.104,273,1.359,277,1.345,284,2.611,288,1.03,293,1.958,294,1.958,295,2.496,296,1.958,299,1.958,302,1.189,305,1.958,314,1.958,315,1.215,319,1.958,320,4.558,323,2.218,325,1.03,331,1.03,332,1.189,338,1.03,348,1.189,351,1.189,356,1.03,366,1.958,376,1.189,378,1.189,379,3.003,380,2.355,381,1.431,382,1.431,383,2.355,384,1.431,385,1.431,386,1.431,387,1.431,388,1.431,389,2.355,390,1.431,391,1.431,392,1.431,393,1.431,394,1.431,395,3.003,396,3.199,397,2.355,398,4.572,399,2.496,400,1.189,401,1.958,402,4.14,403,1.958,404,2.355,405,2.496,406,2.355,407,3.003,408,1.431,409,1.431,410,1.431,411,1.431,412,1.431,413,1.431,414,1.431,415,1.431,416,2.496,417,1.431,418,1.431,419,3.003,420,1.431,421,1.431,422,1.431,423,1.431,424,1.431,425,1.431,426,1.431,427,1.431,428,1.431,429,1.431,430,1.431,431,2.355,432,1.431,433,1.431,434,1.431,435,1.431,436,1.431]],["title/classes/RegisterUserDTO.html",[21,0.2,437,1.603]],["body/classes/RegisterUserDTO.html",[3,0.329,4,0.329,5,0.279,7,0.434,10,1.798,11,0.034,12,1.257,15,0.946,16,0.55,20,0.427,21,0.335,26,0.025,27,0.025,60,0.841,73,2.053,75,1.282,93,3.837,94,3.717,97,2.053,271,2.573,272,2.573,273,2.145,274,2.431,437,2.409,438,2.589,439,2.989,440,3.595,441,4.313,442,3.595,443,3.595,444,3.595,445,4.313,446,1.855]],["title/classes/UpdateEventDTO.html",[21,0.2,98,1.603]],["body/classes/UpdateEventDTO.html",[3,0.305,4,0.305,5,0.259,7,0.402,10,1.818,11,0.034,12,1.271,15,0.918,16,0.51,20,0.406,21,0.322,26,0.024,27,0.024,60,0.85,72,1.718,73,1.901,74,2.398,75,1.219,76,3.396,77,3.396,78,1.901,79,3.396,80,3.396,81,3.396,82,4.153,84,3.639,85,3.691,87,0.914,93,3.919,94,3.715,95,3.691,96,4.615,97,1.901,98,2.29,447,3.33,448,3.33,449,3.33,450,3.33,451,3.33]],["title/classes/UpdateUserDTO.html",[21,0.2,446,1.603]],["body/classes/UpdateUserDTO.html",[3,0.339,4,0.339,5,0.288,7,0.448,10,1.723,11,0.034,12,1.204,15,0.944,16,0.567,20,0.436,21,0.339,26,0.026,27,0.026,60,0.805,73,2.115,75,1.307,93,3.861,94,3.747,97,2.115,271,2.603,272,2.603,273,2.169,274,1.736,437,1.911,438,2.668,439,3.08,441,3.959,445,4.375,446,2.456,452,3.705,453,3.705,454,3.705]],["title/controllers/UserController.html",[0,1.111,455,1.981]],["body/controllers/UserController.html",[0,0.836,2,0.913,3,0.214,4,0.214,5,0.182,7,0.282,8,1.479,10,1.592,11,0.035,12,1.113,14,2.078,15,0.53,16,0.631,17,0.642,20,0.214,21,0.151,22,1.49,24,2.078,26,0.019,27,0.019,60,0.807,87,1.517,109,1.131,112,2.078,137,1.684,142,3.059,149,1.684,152,2.509,153,2.279,169,3.503,170,1.352,171,1.785,175,1.206,177,2.493,178,1.49,179,1.684,180,1.49,193,2.509,195,2.877,196,2.126,197,1.49,198,2.626,201,1.684,240,2.353,241,2.552,262,2.903,268,2.206,269,2.206,273,0.913,274,1.622,284,2.908,300,2.877,323,2.206,396,1.944,437,2.35,446,2.35,455,2.206,456,1.944,457,2.338,458,2.877,459,2.877,460,3.426,461,2.877,462,2.877,463,2.338,464,2.338,465,2.338,466,3.461,467,2.338,468,2.338,469,2.338,470,2.338,471,1.944,472,3.461,473,2.338,474,2.338,475,3.461,476,2.338,477,2.338,478,2.35,479,1.944,480,1.944,481,2.338,482,2.338,483,1.944,484,1.944,485,2.338,486,2.338,487,2.338,488,2.338,489,2.338,490,2.338,491,2.338,492,2.338,493,2.338,494,2.338,495,2.338,496,2.338,497,2.338,498,2.338]],["title/entities/UserEntity.html",[99,1.456,208,1.111]],["body/entities/UserEntity.html",[3,0.333,4,0.333,5,0.283,7,0.44,10,1.871,11,0.034,12,1.308,15,0.924,16,0.557,20,0.333,21,0.235,26,0.025,27,0.025,58,3.39,60,0.874,75,1.292,87,1.292,99,2.205,101,2.077,109,1.432,113,4.347,119,3.758,126,1.705,208,1.682,271,2.445,272,2.445,273,2.037,274,2.445,499,3.025,500,3.638,501,3.638,502,3.638,503,3.638,504,3.638,505,3.638,506,3.638]],["title/interfaces/UserInterface.html",[128,1.214,270,1.981]],["body/interfaces/UserInterface.html",[3,0.338,4,0.338,5,0.287,7,0.446,11,0.034,15,0.976,20,0.435,26,0.026,27,0.026,60,0.879,75,1.305,87,1.576,109,1.576,128,1.856,130,2.109,170,1.442,196,1.905,241,1.578,266,2.109,267,2.66,268,2.354,270,3.029,271,2.69,272,2.69,273,2.242,274,2.6,275,2.66,276,2.66]],["title/modules/UserModule.html",[28,1.018,42,1.775]],["body/modules/UserModule.html",[2,1.924,3,0.357,4,0.357,5,0.304,11,0.034,16,0.894,17,1.072,20,0.357,21,0.252,26,0.026,27,0.026,28,1.766,30,1.831,31,1.669,32,2.231,33,2.231,34,1.831,35,3.08,36,2.231,42,3.404,43,2.813,44,2.231,45,2.231,47,2.49,54,2.49,55,1.669,208,1.397,455,3.438,478,3.075,479,3.248,507,3.248,508,3.248,509,3.907,510,3.907,511,3.248,512,3.907]],["title/injectables/UsersService.html",[66,1.214,478,1.603]],["body/injectables/UsersService.html",[3,0.159,4,0.159,5,0.135,7,0.21,8,1.177,11,0.035,12,1.036,14,1.816,15,0.693,16,0.693,17,0.477,20,0.159,21,0.112,24,1.816,26,0.015,27,0.015,55,0.742,60,0.693,66,1.076,67,0.992,87,1.391,108,1.956,109,1.425,112,1.933,126,0.814,142,2.89,152,2.334,153,2.12,156,3.308,170,0.678,171,0.896,175,1.421,180,1.107,193,2.537,196,0.896,198,1.107,208,0.985,217,1.985,219,3.062,220,1.985,234,3.942,236,1.251,238,1.251,239,1.251,240,2.708,241,2.493,242,3.062,244,3.229,245,2.964,246,2.467,252,1.107,256,1.251,262,1.107,264,1.251,266,1.573,268,1.107,273,1.852,274,2.222,275,1.251,276,1.251,323,1.107,325,2.808,331,2.808,336,1.444,338,1.985,341,3.241,356,1.985,399,3.241,400,3.241,401,3.534,403,1.444,405,2.291,416,1.444,437,2.011,446,2.011,458,2.291,459,2.291,460,2.291,461,2.291,462,2.847,471,2.291,478,1.421,480,1.444,483,1.444,484,1.444,511,1.444,513,1.444,514,1.737,515,1.737,516,2.756,517,1.737,518,2.756,519,1.737,520,2.756,521,1.737,522,1.737,523,1.737,524,1.737,525,2.756,526,1.737,527,2.756,528,1.737,529,1.737,530,4.742,531,3.899,532,1.737,533,1.737,534,1.737,535,1.737,536,1.737,537,2.756,538,1.737,539,1.737,540,1.737,541,1.737,542,1.737,543,3.425,544,3.425,545,1.737,546,1.737,547,1.737,548,1.737,549,1.737]],["title/coverage.html",[550,3.053]],["body/coverage.html",[0,1.878,1,2.049,5,0.25,6,2.673,11,0.034,18,1.659,21,0.339,26,0.023,27,0.023,34,1.507,60,0.492,66,2.052,68,2.673,72,1.659,74,3.124,98,1.659,99,2.3,100,1.374,102,2.673,128,2.052,129,1.836,131,2.673,135,2.049,136,2.673,182,1.659,208,1.149,211,2.673,245,1.836,252,3.994,266,1.836,267,3.124,270,2.049,277,1.836,278,2.673,289,2.316,290,2.673,291,2.049,292,2.673,315,1.659,378,2.673,437,1.659,438,3.124,446,1.659,455,2.049,456,2.673,478,1.659,499,2.673,513,2.673,550,2.316,551,2.673,552,3.215,553,3.215,554,4.337,555,4.908,556,3.215,557,3.215,558,4.908,559,5.254,560,3.215,561,3.215,562,3.215,563,3.606,564,4.337,565,5.254,566,2.673,567,4.337,568,4.337,569,3.215,570,3.215]],["title/dependencies.html",[31,1.597,571,2.159]],["body/dependencies.html",[11,0.034,17,1.158,21,0.333,26,0.028,27,0.028,28,1.381,31,1.802,53,3.507,55,1.802,97,2.409,126,1.977,181,3.038,572,5.82,573,4.219,574,4.219,575,4.219,576,4.219,577,4.219,578,4.219,579,4.219,580,4.219,581,4.219,582,4.219,583,4.219,584,4.219,585,4.219,586,4.219,587,4.219,588,4.219,589,4.219,590,4.219]],["title/miscellaneous/functions.html",[591,2.159,592,3.107]],["body/miscellaneous/functions.html",[7,0.576,11,0.03,26,0.03,27,0.03,34,2.756,563,3.96,566,4.889,591,3.96,592,3.96,593,5.556]],["title/index.html",[7,0.314,594,2.597,595,2.597]],["body/index.html",[11,0.034,26,0.024,27,0.024,28,1.112,31,1.45,103,1.591,104,1.756,124,3.633,138,2.445,212,4.135,326,3.739,550,2.445,551,3.739,596,5.044,597,3.395,598,3.395,599,3.395,600,3.395,601,3.395,602,3.395,603,5.37,604,4.498,605,3.395,606,3.395,607,3.395,608,5.742,609,3.395,610,3.395,611,3.395,612,4.498,613,3.395,614,3.395,615,6.078,616,3.395,617,4.498,618,5.947,619,3.395,620,4.498,621,3.395,622,3.395,623,3.395,624,3.395,625,3.395,626,4.498,627,4.498,628,3.395,629,3.395,630,3.395,631,3.395,632,4.498,633,3.395,634,3.395,635,4.498,636,3.395]],["title/modules.html",[30,1.986]],["body/modules.html",[11,0.029,26,0.029,27,0.029,29,2.932,30,2.156,40,2.628,41,2.628,42,2.628,637,5.992,638,5.992,639,5.992,640,5.992]],["title/overview.html",[641,3.524]],["body/overview.html",[2,1.483,11,0.033,18,2.746,26,0.026,27,0.026,28,1.243,29,3.948,30,1.779,31,1.622,32,2.168,33,2.168,34,1.779,35,2.168,36,2.168,37,3.157,38,3.157,39,3.157,40,3.305,41,3.305,42,3.305,43,2.762,44,2.168,45,2.168,67,2.168,73,2.168,101,2.168,130,2.168,182,2.746,202,3.157,203,3.157,315,2.746,372,3.157,373,3.157,478,2.746,507,3.157,508,3.157,641,3.157,642,5.789,643,3.797]],["title/properties.html",[75,1.026,571,2.159]],["body/properties.html",[11,0.034,26,0.03,27,0.03,75,1.313,103,2.241,644,4.783,645,4.783,646,4.783,647,4.783,648,4.783]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":252,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":645,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["1/1",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["2.2.3",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":643,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["3.6.1",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":541,"title":{},"body":{"injectables/UsersService.html":{}}}],["4",{"_index":642,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["8.11.3",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["87",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":536,"title":{},"body":{"injectables/UsersService.html":{}}}],["affected",{"_index":430,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["alias",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["alnlgsnsoajg",{"_index":540,"title":{},"body":{"injectables/UsersService.html":{}}}],["along",{"_index":432,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["already",{"_index":405,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["api",{"_index":612,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["associate",{"_index":410,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["associated",{"_index":419,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["async",{"_index":142,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":648,"title":{},"body":{"properties.html":{}}}],["autofix",{"_index":633,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":601,"title":{},"body":{"index.html":{}}}],["await",{"_index":193,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":597,"title":{},"body":{"index.html":{}}}],["body",{"_index":177,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["body('pid",{"_index":364,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["body('status",{"_index":365,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":640,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":637,"title":{},"body":{"modules.html":{}}}],["build",{"_index":611,"title":{},"body":{"index.html":{}}}],["buildtest",{"_index":624,"title":{},"body":{"index.html":{}}}],["catch",{"_index":331,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["check",{"_index":399,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":21,"title":{"classes/CreateEventDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":73,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":202,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":203,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule",{"_index":372,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule_providers",{"_index":373,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":507,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":508,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":113,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}}}],["column({nullable",{"_index":110,"title":{},"body":{"entities/EventEntity.html":{}}}],["column({unique",{"_index":500,"title":{},"body":{"entities/UserEntity.html":{}}}],["compose",{"_index":604,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["conflict",{"_index":408,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["conflictexception",{"_index":391,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["conflictexception('participant",{"_index":409,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["const",{"_index":240,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":217,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["constructor(eventrepository",{"_index":218,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(participantrepository",{"_index":381,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["contains",{"_index":205,"title":{},"body":{"modules/EventsModule.html":{}}}],["content",{"_index":157,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('events",{"_index":186,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('participants",{"_index":317,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["controller('users",{"_index":481,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":550,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":151,"title":{},"body":{"controllers/EventsController.html":{},"injectables/ParticipantsService.html":{}}}],["created",{"_index":155,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent",{"_index":143,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent(@body",{"_index":187,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent(event",{"_index":148,"title":{},"body":{"controllers/EventsController.html":{}}}],["createeventdto",{"_index":72,"title":{"classes/CreateEventDTO.html":{}},"body":{"classes/CreateEventDTO.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDTO.html":{},"coverage.html":{}}}],["creation",{"_index":599,"title":{},"body":{"index.html":{}}}],["data",{"_index":268,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["data.password",{"_index":492,"title":{},"body":{"controllers/UserController.html":{}}}],["database",{"_index":108,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":84,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":171,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":166,"title":{},"body":{"controllers/EventsController.html":{}}}],["delete(':pid",{"_index":300,"title":{},"body":{"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["deleted",{"_index":201,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["deleteevent",{"_index":214,"title":{},"body":{"injectables/EventsService.html":{}}}],["deleteevent(eventid",{"_index":224,"title":{},"body":{"injectables/EventsService.html":{}}}],["deleteparticipant",{"_index":294,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["deleteparticipant(@param('pid",{"_index":346,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["deleteparticipant(pid",{"_index":299,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["deleteuser",{"_index":458,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param('pid",{"_index":497,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(pid",{"_index":463,"title":{},"body":{"controllers/UserController.html":{}}}],["deleting",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletion",{"_index":602,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":482,"title":{},"body":{"controllers/UserController.html":{}}}],["desc",{"_index":76,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["describe",{"_index":132,"title":{},"body":{"interfaces/EventInterface.html":{}}}],["description",{"_index":103,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":323,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["dev",{"_index":605,"title":{},"body":{"index.html":{}}}],["development",{"_index":617,"title":{},"body":{"index.html":{}}}],["docker",{"_index":603,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":551,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e",{"_index":332,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["e2e",{"_index":628,"title":{},"body":{"index.html":{}}}],["email",{"_index":273,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":115,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["end_time",{"_index":77,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["entities",{"_index":101,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entity",{"_index":99,"title":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["entitynotfounderror",{"_index":525,"title":{},"body":{"injectables/UsersService.html":{}}}],["error",{"_index":530,"title":{},"body":{"injectables/UsersService.html":{}}}],["eslint",{"_index":634,"title":{},"body":{"index.html":{}}}],["event",{"_index":104,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"index.html":{}}}],["event.host",{"_index":243,"title":{},"body":{"injectables/EventsService.html":{}}}],["event_id",{"_index":280,"title":{},"body":{"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{}}}],["evententity",{"_index":100,"title":{"entities/EventEntity.html":{}},"body":{"entities/EventEntity.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["eventid",{"_index":163,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["eventinterface",{"_index":129,"title":{"interfaces/EventInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["eventrepository",{"_index":223,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["events",{"_index":138,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["events.controller",{"_index":206,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.length",{"_index":251,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.service",{"_index":183,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/events.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["events[0",{"_index":254,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventscontroller",{"_index":135,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":40,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":182,"title":{"injectables/EventsService.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventual",{"_index":600,"title":{},"body":{"index.html":{}}}],["example",{"_index":608,"title":{},"body":{"index.html":{}}}],["exception",{"_index":398,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["exceptions",{"_index":334,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["existing",{"_index":418,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["existingparticipant",{"_index":406,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["exists",{"_index":401,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["existuser",{"_index":527,"title":{},"body":{"injectables/UsersService.html":{}}}],["expires_in",{"_index":276,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["extract",{"_index":321,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["facilitates",{"_index":598,"title":{},"body":{"index.html":{}}}],["failed",{"_index":338,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["fetch",{"_index":350,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":256,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["first_name",{"_index":271,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{}}}],["format",{"_index":635,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":631,"title":{},"body":{"index.html":{}}}],["forward",{"_index":370,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["found",{"_index":246,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["founduser",{"_index":402,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.email",{"_index":426,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.first_name",{"_index":422,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.last_name",{"_index":424,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["from(this.eventrepository.find",{"_index":249,"title":{},"body":{"injectables/EventsService.html":{}}}],["from(this.eventsservice.getevent(eventid",{"_index":191,"title":{},"body":{"controllers/EventsController.html":{}}}],["function",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":592,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":121,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["get(':eventid",{"_index":306,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["get(':id",{"_index":161,"title":{},"body":{"controllers/EventsController.html":{}}}],["get(':pid",{"_index":466,"title":{},"body":{"controllers/UserController.html":{}}}],["getallevents",{"_index":144,"title":{},"body":{"controllers/EventsController.html":{}}}],["getevent",{"_index":145,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["getevent(@param('id",{"_index":190,"title":{},"body":{"controllers/EventsController.html":{}}}],["getevent(eventid",{"_index":160,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["getevents",{"_index":215,"title":{},"body":{"injectables/EventsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":594,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":459,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["getuser(@param('pid",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuser(pid",{"_index":465,"title":{},"body":{"controllers/UserController.html":{}}}],["given",{"_index":395,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["handle",{"_index":139,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{}}}],["hello",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":78,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDTO.html":{}}}],["httpcode",{"_index":477,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":489,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception",{"_index":234,"title":{},"body":{"injectables/EventsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('user",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus",{"_index":180,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":247,"title":{},"body":{"injectables/EventsService.html":{}}}],["httpstatus.conflict",{"_index":528,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.internal_server_error",{"_index":531,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.not_found",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.ok",{"_index":195,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UserController.html":{}}}],["httpstatus.unauthorized",{"_index":535,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":109,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":107,"title":{},"body":{"entities/EventEntity.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["initalias",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["inject",{"_index":222,"title":{},"body":{"injectables/EventsService.html":{}}}],["injectable",{"_index":66,"title":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":318,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["injection",{"_index":483,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":236,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(evententity",{"_index":237,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["injectrepository(participantentity",{"_index":394,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["injectrepository(userentity",{"_index":239,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["injects",{"_index":392,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["insert",{"_index":230,"title":{},"body":{"injectables/EventsService.html":{}}}],["inserted",{"_index":231,"title":{},"body":{"injectables/EventsService.html":{}}}],["insertevent",{"_index":216,"title":{},"body":{"injectables/EventsService.html":{}}}],["insertevent(event",{"_index":228,"title":{},"body":{"injectables/EventsService.html":{}}}],["installation",{"_index":614,"title":{},"body":{"index.html":{}}}],["installing",{"_index":607,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":616,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":336,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":128,"title":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":130,"title":{},"body":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{},"overview.html":{}}}],["internal",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["internalservererrorexception",{"_index":314,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["internalservererrorexception('failed",{"_index":363,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["invalid",{"_index":534,"title":{},"body":{"injectables/UsersService.html":{}}}],["invitations",{"_index":329,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["invite",{"_index":319,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["invited",{"_index":415,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["inviteparticipant",{"_index":295,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["inviteparticipant(eventid",{"_index":302,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["isdatestring",{"_index":96,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/UpdateEventDTO.html":{}}}],["isemail",{"_index":445,"title":{},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isemail()@isnotempty",{"_index":439,"title":{},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isglobal",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":93,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isnotempty()@isdatestring",{"_index":85,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/UpdateEventDTO.html":{}}}],["isnotempty()@isnumber",{"_index":88,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["isnotempty()@isstring",{"_index":82,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/UpdateEventDTO.html":{}}}],["isnumber",{"_index":95,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/UpdateEventDTO.html":{}}}],["isstring",{"_index":94,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isstring()@isnotempty",{"_index":441,"title":{},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["joincolumn",{"_index":287,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["key",{"_index":259,"title":{},"body":{"injectables/EventsService.html":{}}}],["last_name",{"_index":272,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":646,"title":{},"body":{"properties.html":{}}}],["lint",{"_index":632,"title":{},"body":{"index.html":{}}}],["list",{"_index":348,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["listparticipants",{"_index":296,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["listparticipants(@param('eventid",{"_index":349,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["listparticipants(eventid",{"_index":305,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["literal",{"_index":269,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["location",{"_index":79,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["logged",{"_index":539,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":460,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":490,"title":{},"body":{"controllers/UserController.html":{}}}],["login(data",{"_index":468,"title":{},"body":{"controllers/UserController.html":{}}}],["login(email",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginresponse",{"_index":266,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["look",{"_index":369,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["management",{"_index":596,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":286,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":279,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["map",{"_index":353,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["matches",{"_index":532,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":196,"title":{},"body":{"controllers/EventsController.html":{},"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":327,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":591,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":620,"title":{},"body":{"index.html":{}}}],["models/event.dto",{"_index":185,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["models/event.entity",{"_index":207,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["models/event.interface",{"_index":184,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["models/participant.entity",{"_index":376,"title":{},"body":{"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["models/user.dto",{"_index":480,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["models/user.entity",{"_index":511,"title":{},"body":{"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["models/user.interface",{"_index":526,"title":{},"body":{"injectables/UsersService.html":{}}}],["modified",{"_index":176,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql2",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":153,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":154,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":245,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newparticipant",{"_index":411,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.event",{"_index":412,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.status",{"_index":414,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.user",{"_index":413,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception",{"_index":235,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["notfoundexception('event",{"_index":253,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception('participant",{"_index":431,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception('user",{"_index":404,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception(`could",{"_index":255,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception(`event",{"_index":265,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["notfoundexception(`participant",{"_index":420,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception(e.message",{"_index":337,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["nullable",{"_index":127,"title":{},"body":{"entities/EventEntity.html":{}}}],["number",{"_index":87,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/UpdateEventDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":134,"title":{},"body":{"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["observable",{"_index":159,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["operations",{"_index":141,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["optional",{"_index":112,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["over",{"_index":354,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["overview",{"_index":641,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.id",{"_index":358,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.status",{"_index":362,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.email",{"_index":361,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.first_name",{"_index":359,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.last_name",{"_index":360,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["package",{"_index":571,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":178,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["param('event_id",{"_index":339,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["param('eventid",{"_index":192,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{}}}],["param('pid",{"_index":340,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["parameter",{"_index":322,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["parameters",{"_index":152,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["participant",{"_index":320,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["participant's",{"_index":366,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["participant.controller",{"_index":375,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["participant.service",{"_index":316,"title":{},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{}}}],["participant.status",{"_index":435,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participantentity",{"_index":277,"title":{"entities/ParticipantEntity.html":{}},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["participantinterface",{"_index":289,"title":{"interfaces/ParticipantInterface.html":{}},"body":{"interfaces/ParticipantInterface.html":{},"coverage.html":{}}}],["participantrepository",{"_index":383,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants",{"_index":293,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["participants.map((p",{"_index":357,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["participants/participant.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["participantscontroller",{"_index":291,"title":{"controllers/ParticipantsController.html":{}},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"coverage.html":{}}}],["participantsmodule",{"_index":41,"title":{"modules/ParticipantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParticipantsModule.html":{},"modules.html":{},"overview.html":{}}}],["participantsservice",{"_index":315,"title":{"injectables/ParticipantsService.html":{}},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{},"overview.html":{}}}],["participation",{"_index":371,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["password",{"_index":274,"title":{},"body":{"interfaces/LoginResponse.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":179,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["patch(':event_id/:pid",{"_index":309,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["patch(':eventid",{"_index":173,"title":{},"body":{"controllers/EventsController.html":{}}}],["patch(':pid",{"_index":475,"title":{},"body":{"controllers/UserController.html":{}}}],["patch('respond",{"_index":312,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["pg",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":284,"title":{},"body":{"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["pnpm",{"_index":615,"title":{},"body":{"index.html":{}}}],["post",{"_index":149,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["post(':eventid",{"_index":303,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["post('login",{"_index":488,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login')@httpcode(httpstatus.ok",{"_index":469,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":472,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":137,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":636,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":119,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}}}],["private",{"_index":238,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["process.env.database_url",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":622,"title":{},"body":{"index.html":{}}}],["promise",{"_index":156,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":75,"title":{"properties.html":{}},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"properties.html":{}}}],["protectlist",{"_index":257,"title":{},"body":{"injectables/EventsService.html":{}}}],["protectlist.foreach((key",{"_index":258,"title":{},"body":{"injectables/EventsService.html":{}}}],["provided",{"_index":400,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["re",{"_index":335,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["reflect",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":461,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["register(@body",{"_index":485,"title":{},"body":{"controllers/UserController.html":{}}}],["register(user",{"_index":471,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registered",{"_index":487,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruserdto",{"_index":437,"title":{"classes/RegisterUserDTO.html":{}},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["registration",{"_index":484,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":434,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["relevant",{"_index":140,"title":{},"body":{"controllers/EventsController.html":{}}}],["relevent",{"_index":213,"title":{},"body":{"injectables/EventsService.html":{}}}],["remove",{"_index":168,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent",{"_index":146,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent(@param('id",{"_index":199,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent(eventid",{"_index":165,"title":{},"body":{"controllers/EventsController.html":{}}}],["repositories",{"_index":393,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["repository",{"_index":219,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["request",{"_index":324,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["required",{"_index":117,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":356,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["result",{"_index":262,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["result.affected",{"_index":264,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":396,"title":{},"body":{"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["rows",{"_index":429,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["run",{"_index":618,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":181,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"dependencies.html":{}}}],["save",{"_index":416,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["sent",{"_index":330,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["server",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["service",{"_index":212,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"index.html":{}}}],["shape",{"_index":355,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["specific",{"_index":333,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/.../main.ts",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["src/events/events.controller.ts",{"_index":136,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:29",{"_index":150,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:38",{"_index":158,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:48",{"_index":162,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:59",{"_index":174,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:76",{"_index":167,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module.ts",{"_index":204,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.service.ts",{"_index":211,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:104",{"_index":225,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:19",{"_index":221,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:36",{"_index":229,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:55",{"_index":227,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:64",{"_index":226,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:82",{"_index":233,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/models/event.dto.ts",{"_index":74,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/UpdateEventDTO.html":{},"coverage.html":{}}}],["src/events/models/event.dto.ts:10",{"_index":83,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.dto.ts:14",{"_index":91,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.dto.ts:18",{"_index":86,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.dto.ts:22",{"_index":90,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.dto.ts:26",{"_index":89,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.dto.ts:32",{"_index":451,"title":{},"body":{"classes/UpdateEventDTO.html":{}}}],["src/events/models/event.dto.ts:36",{"_index":447,"title":{},"body":{"classes/UpdateEventDTO.html":{}}}],["src/events/models/event.dto.ts:40",{"_index":450,"title":{},"body":{"classes/UpdateEventDTO.html":{}}}],["src/events/models/event.dto.ts:44",{"_index":448,"title":{},"body":{"classes/UpdateEventDTO.html":{}}}],["src/events/models/event.dto.ts:48",{"_index":449,"title":{},"body":{"classes/UpdateEventDTO.html":{}}}],["src/events/models/event.dto.ts:6",{"_index":92,"title":{},"body":{"classes/CreateEventDTO.html":{}}}],["src/events/models/event.entity",{"_index":288,"title":{},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["src/events/models/event.entity.ts",{"_index":102,"title":{},"body":{"entities/EventEntity.html":{},"coverage.html":{}}}],["src/events/models/event.entity.ts:12",{"_index":120,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:18",{"_index":125,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:24",{"_index":111,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:30",{"_index":123,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:36",{"_index":114,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:42",{"_index":122,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:45",{"_index":118,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.interface.ts",{"_index":131,"title":{},"body":{"interfaces/EventInterface.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":563,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/participants/models/participant.entity.ts",{"_index":278,"title":{},"body":{"entities/ParticipantEntity.html":{},"coverage.html":{}}}],["src/participants/models/participant.entity.ts:14",{"_index":282,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:18",{"_index":285,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:22",{"_index":281,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:25",{"_index":283,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.interface.ts",{"_index":290,"title":{},"body":{"interfaces/ParticipantInterface.html":{},"coverage.html":{}}}],["src/participants/participant.controller.ts",{"_index":292,"title":{},"body":{"controllers/ParticipantsController.html":{},"coverage.html":{}}}],["src/participants/participant.controller.ts:119",{"_index":313,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:21",{"_index":304,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:43",{"_index":310,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:75",{"_index":301,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:94",{"_index":307,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.module.ts",{"_index":374,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["src/participants/participant.service.ts",{"_index":378,"title":{},"body":{"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["src/participants/participant.service.ts:128",{"_index":384,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:137",{"_index":386,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:146",{"_index":390,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:16",{"_index":382,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:28",{"_index":385,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:82",{"_index":388,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/users/models/user.dto.ts",{"_index":438,"title":{},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/users/models/user.dto.ts:10",{"_index":454,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/users/models/user.dto.ts:14",{"_index":452,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/users/models/user.dto.ts:20",{"_index":442,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/users/models/user.dto.ts:24",{"_index":443,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/users/models/user.dto.ts:28",{"_index":440,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/users/models/user.dto.ts:32",{"_index":444,"title":{},"body":{"classes/RegisterUserDTO.html":{}}}],["src/users/models/user.dto.ts:6",{"_index":453,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/users/models/user.entity",{"_index":209,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["src/users/models/user.entity.ts",{"_index":499,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts:12",{"_index":504,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:15",{"_index":501,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:18",{"_index":505,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:6",{"_index":503,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:9",{"_index":502,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.interface.ts",{"_index":267,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["src/users/user.controller.ts",{"_index":456,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:22",{"_index":473,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:30",{"_index":470,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:37",{"_index":467,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:45",{"_index":476,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:55",{"_index":464,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.module.ts",{"_index":509,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/user.service.ts",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/user.service.ts:110",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:16",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:44",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:73",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:87",{"_index":524,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:9",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":124,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"index.html":{}}}],["start:dev",{"_index":621,"title":{},"body":{"index.html":{}}}],["start:prodbuild",{"_index":623,"title":{},"body":{"index.html":{}}}],["start_time",{"_index":80,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["started",{"_index":595,"title":{"index.html":{}},"body":{}}],["statements",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":170,"title":{},"body":{"controllers/EventsController.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["store",{"_index":106,"title":{},"body":{"entities/EventEntity.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["structure",{"_index":133,"title":{},"body":{"interfaces/EventInterface.html":{}}}],["success",{"_index":538,"title":{},"body":{"injectables/UsersService.html":{}}}],["successfully",{"_index":198,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["sudo",{"_index":609,"title":{},"body":{"index.html":{}}}],["support",{"_index":638,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":639,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":613,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":164,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["test",{"_index":627,"title":{},"body":{"index.html":{}}}],["test:covlinting",{"_index":630,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":629,"title":{},"body":{"index.html":{}}}],["tests",{"_index":626,"title":{},"body":{"index.html":{}}}],["thank",{"_index":368,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.eventrepository.delete(eventid",{"_index":263,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.find",{"_index":250,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.findone",{"_index":397,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.eventrepository.save(event",{"_index":248,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepository.update",{"_index":261,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.deleteevent(eventid",{"_index":200,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.getevents",{"_index":189,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.insertevent(event",{"_index":188,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.updateevent(eventid",{"_index":194,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.participantrepository.delete(pid",{"_index":428,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.find",{"_index":433,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.findone",{"_index":407,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.save(newparticipant",{"_index":417,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.save(participant",{"_index":436,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantsservice.deleteparticipant(pid",{"_index":347,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.inviteparticipant(eventid",{"_index":328,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.listparticipants(eventid",{"_index":352,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.updateparticipant",{"_index":342,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.updatestatus(pid",{"_index":367,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.userrepository.delete(id",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":242,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneorfail",{"_index":542,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(founduser",{"_index":427,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.userrepository.save(user",{"_index":529,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.deleteuser(pid",{"_index":498,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getuser(pid",{"_index":494,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.login(data.email",{"_index":491,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.register(user",{"_index":486,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.updateuser(pid",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":116,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["title",{"_index":81,"title":{},"body":{"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"classes/UpdateEventDTO.html":{}}}],["token",{"_index":275,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["transformer",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"entities/EventEntity.html":{},"entities/UserEntity.html":{}}}],["try",{"_index":325,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEventDTO.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":126,"title":{},"body":{"entities/EventEntity.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([evententity",{"_index":210,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([participantentity",{"_index":377,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":512,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["unique",{"_index":506,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":625,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":169,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":647,"title":{},"body":{"properties.html":{}}}],["up",{"_index":610,"title":{},"body":{"index.html":{}}}],["update",{"_index":175,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":197,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["updatedevent",{"_index":232,"title":{},"body":{"injectables/EventsService.html":{}}}],["updatedevent[key",{"_index":260,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateduser",{"_index":341,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/UsersService.html":{}}}],["updateduser.email",{"_index":345,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateduser.first_name",{"_index":343,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateduser.last_name",{"_index":344,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateevent",{"_index":147,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["updateevent(eventid",{"_index":172,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["updateeventdto",{"_index":98,"title":{"classes/UpdateEventDTO.html":{}},"body":{"classes/CreateEventDTO.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"classes/UpdateEventDTO.html":{},"coverage.html":{}}}],["updateparticipant",{"_index":379,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateparticipant(eventid",{"_index":387,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateparticipantdetails",{"_index":297,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantdetails(eventid",{"_index":308,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantstatus",{"_index":298,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantstatus(pid",{"_index":311,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updatestatus",{"_index":380,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updatestatus(pid",{"_index":389,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateuser",{"_index":462,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateuser(@param('pid",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(id",{"_index":523,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(pid",{"_index":474,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto",{"_index":446,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/RegisterUserDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["url",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/ParticipantsController.html":{}}}],["use",{"_index":326,"title":{},"body":{"controllers/ParticipantsController.html":{},"index.html":{}}}],["used",{"_index":105,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"injectables/EventsService.html":{}}}],["user",{"_index":241,"title":{},"body":{"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["user's",{"_index":421,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["user.controller",{"_index":510,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":403,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["user.first_name",{"_index":423,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["user.last_name",{"_index":425,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["user.password",{"_index":533,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.service",{"_index":479,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":455,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":537,"title":{},"body":{"injectables/UsersService.html":{}}}],["userentity",{"_index":208,"title":{"entities/UserEntity.html":{}},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userinterface",{"_index":270,"title":{"interfaces/UserInterface.html":{}},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepository",{"_index":220,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":457,"title":{},"body":{"controllers/UserController.html":{}}}],["users/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["usersservice",{"_index":478,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":351,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["validator",{"_index":97,"title":{},"body":{"classes/CreateEventDTO.html":{},"classes/RegisterUserDTO.html":{},"classes/UpdateEventDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["version",{"_index":644,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":619,"title":{},"body":{"index.html":{}}}],["without",{"_index":606,"title":{},"body":{"index.html":{}}}],["world",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                        \n                            ParticipantsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { EventsModule } from './events/events.module';\nimport { UserModule } from './users/user.module';\nimport { ParticipantsModule } from './participants/participant.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    EventsModule,\n    UserModule,\n    ParticipantsModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      autoLoadEntities: true,\n      synchronize: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEventDTO.html":{"url":"classes/CreateEventDTO.html","title":"class - CreateEventDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEventDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                end_time\n                            \n                            \n                                    \n                                    \n                                host\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                start_time\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        end_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsNumber, IsDateString } from 'class-validator';\n\nexport class CreateEventDTO {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  desc: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  start_time: Date;\n\n  @IsNotEmpty()\n  @IsDateString()\n  end_time: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  host: number;\n}\n\nexport class UpdateEventDTO {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  desc: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  start_time: Date;\n\n  @IsNotEmpty()\n  @IsDateString()\n  end_time: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventEntity.html":{"url":"entities/EventEntity.html","title":"entity - EventEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Event entity which is used to store event information in database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                desc\n                            \n                            \n                                    \n                                end_time\n                            \n                            \n                                    \n                                host\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                location\n                            \n                            \n                                    \n                                start_time\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:24\n                        \n                    \n\n            \n                \n                    Event description. Optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:36\n                        \n                    \n\n            \n                \n                    Event end time. Required.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:12\n                        \n                    \n\n            \n                \n                    Event ID. Generated by database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:42\n                        \n                    \n\n            \n                \n                    Event location. Optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:30\n                        \n                    \n\n            \n                \n                    Event start time. Required.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:18\n                        \n                    \n\n            \n                \n                    Event title. Required.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Event entity which is used to store event information in database.\n */\n@Entity()\nexport class EventEntity {\n  /**\n   * Event ID. Generated by database.\n   */\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  /**\n   * Event title. Required.\n   */\n  @Column()\n  title: string;\n\n  /**\n   * Event description. Optional.\n   */\n  @Column({ nullable: true })\n  desc: string;\n\n  /**\n   * Event start time. Required.\n   */\n  @Column()\n  start_time: Date;\n\n  /**\n   * Event end time. Required.\n   */\n  @Column()\n  end_time: Date;\n\n  /**\n   * Event location. Optional.\n   */\n  @Column({ nullable: true })\n  location: string;\n\n  @Column({ nullable: true })\n  host: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventInterface.html":{"url":"interfaces/EventInterface.html","title":"interface - EventInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Event Interface which is used to describe the structure of a event object.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            desc\n                                        \n                                \n                                \n                                        \n                                            end_time\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            start_time\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        desc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        desc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event description. Optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        end_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event end time. Required.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event ID. Generated by database.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event location. Optional.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event start time. Required.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Event title. Required.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface EventInterface {\n  /**\n   * Event ID. Generated by database.\n   */\n  id: string;\n  /**\n   * Event title. Required.\n   */\n  title: string;\n  /**\n   * Event description. Optional.\n   */\n  desc: string;\n  /**\n   * Event start time. Required.\n   */\n  start_time: Date;\n  /**\n   * Event end time. Required.\n   */\n  end_time: Date;\n  /**\n   * Event location. Optional.\n   */\n  location: string;\n  host: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n            \n                Description\n            \n            \n                The event controller which will handle the event relevant operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createEvent\n                            \n                            \n                                    \n                                getAllEvents\n                            \n                            \n                                    \n                                getEvent\n                            \n                            \n                                    \n                                    Async\n                                removeEvent\n                            \n                            \n                                    \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(event: CreateEventDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Create a event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CreateEventDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The information of the event that need to be created.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Return the content of the event object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Get all the events.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                The information of all the events.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:48\n                        \n                    \n\n\n            \n                \n                        Get a event by EventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                The information of the target event.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Remove Event by EventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Return status of the event delete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(eventId: string, event: UpdateEventDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':eventId')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Update Event by EventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                        \n                                                event\n                                            \n                                                            UpdateEventDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The information that need to be modified in an event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Return status of the event update.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Param,\n  Patch,\n  Delete,\n  HttpStatus,\n} from '@nestjs/common';\nimport { from, Observable } from 'rxjs';\nimport { EventsService } from './events.service';\nimport { EventInterface } from './models/event.interface';\nimport { CreateEventDTO, UpdateEventDTO } from './models/event.dto';\n\n/**\n * The event controller which will handle the event relevant operations.\n */\n@Controller('events')\nexport class EventsController {\n  constructor(private eventsService: EventsService) {}\n\n  /**\n   * Create a event.\n   * @param {CreateEventDTO} event The information of the event that need to be created.\n   * @returns {Promise} Return the content of the event object.\n   */\n  @Post()\n  async createEvent(@Body() event: CreateEventDTO): Promise {\n    return this.eventsService.insertEvent(event);\n  }\n\n  /**\n   * Get all the events.\n   * @returns {Observable} The information of all the events.\n   */\n  @Get()\n  getAllEvents(): Observable {\n    return this.eventsService.getEvents();\n  }\n\n  /**\n   * Get a event by EventID.\n   * @param {string} eventId The event ID.\n   * @returns {Observable} The information of the target event.\n   */\n  @Get(':id')\n  getEvent(@Param('id') eventId: string): Observable {\n    return from(this.eventsService.getEvent(eventId));\n  }\n\n  /**\n   * Update Event by EventID.\n   * @param {string} eventId The event ID.\n   * @param {UpdateEventDTO} event The information that need to be modified in an event.\n   * @returns {Object} Return status of the event update.\n   */\n  @Patch(':eventId')\n  async updateEvent(\n    @Param('eventId') eventId: string,\n    @Body() event: UpdateEventDTO,\n  ) {\n    await this.eventsService.updateEvent(eventId, event);\n    return {\n      status: HttpStatus.OK,\n      message: 'Event updated successfully',\n    };\n  }\n\n  /**\n   * Remove Event by EventID.\n   * @param {string} eventId The event ID.\n   * @returns {Object} Return status of the event delete.\n   */\n  @Delete(':id')\n  async removeEvent(@Param('id') eventId: string) {\n    await this.eventsService.deleteEvent(eventId);\n    return {\n      status: HttpStatus.OK,\n      message: 'Event deleted successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventsService\n\nEventsService\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Event module which contains EventsController and EventsService.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsController } from './events.controller';\nimport { EventsService } from './events.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventEntity } from './models/event.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\n\n/**\n * Event module which contains EventsController and EventsService.\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([EventEntity, UserEntity])],\n  controllers: [EventsController],\n  providers: [EventsService],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Event Service which will handle event relevent database operations, can be used by event controller.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                getEvents\n                            \n                            \n                                    Async\n                                insertEvent\n                            \n                            \n                                    Async\n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:19\n                            \n                        \n\n                \n                    \n                            Event constructor which will inject event repository.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteEvent(eventID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:104\n                        \n                    \n\n\n            \n                \n                        Delete a event by eventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvent(eventID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Get a event by eventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The information of the target event from database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEvents\n                        \n                    \n                \n            \n            \n                \ngetEvents()\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get all the events.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                The information of all the events from database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        insertEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    insertEvent(event: CreateEventDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Insert a event into database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            CreateEventDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The EventInterface object that need to be inserted into database.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Return the content of the event object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(eventID: string, updatedEvent: UpdateEventDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Update a event by eventID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event ID.\n\n                                            \n                                        \n                                        \n                                                updatedEvent\n                                            \n                                                            UpdateEventDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The information that need to be modified in an event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { EventEntity } from './models/event.entity';\nimport { EventInterface } from './models/event.interface';\nimport { from, Observable } from 'rxjs';\nimport { CreateEventDTO, UpdateEventDTO } from './models/event.dto';\nimport { UserEntity } from 'src/users/models/user.entity';\n\n/**\n * Event Service which will handle event relevent database operations, can be used by event controller.\n */\n@Injectable()\nexport class EventsService {\n  /**\n   * Event constructor which will inject event repository.\n   * @param eventRepository\n   */\n  constructor(\n    @InjectRepository(EventEntity)\n    private eventRepository: Repository,\n    @InjectRepository(UserEntity)\n    private userRepository: Repository,\n  ) {}\n\n  /**\n   * Insert a event into database.\n   * @param {CreateEventDTO} event The EventInterface object that need to be inserted into database.\n   * @returns {Observable} Return the content of the event object.\n   */\n  async insertEvent(event: CreateEventDTO): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id: event.host },\n    });\n\n    if (!user) {\n      throw new HttpException(\n        'Host not found in user database',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return this.eventRepository.save(event);\n  }\n\n  /**\n   * Get all the events.\n   * @returns {Observable} The information of all the events from database.\n   */\n  getEvents(): Observable {\n    return from(this.eventRepository.find());\n  }\n\n  /**\n   * Get a event by eventID.\n   * @param {string} eventID The event ID.\n   * @returns {Promise} The information of the target event from database.\n   */\n  async getEvent(eventID: string): Promise {\n    const events = await this.eventRepository.find({\n      where: {\n        id: eventID,\n      },\n    });\n    if (events.length === 0) {\n      throw new NotFoundException('Event Not Found.');\n    }\n\n    return events[0];\n  }\n\n  /**\n   * Update a event by eventID.\n   * @param {string} eventID The event ID.\n   * @param {UpdateEventDTO} updatedEvent The information that need to be modified in an event.\n   */\n  async updateEvent(eventID: string, updatedEvent: UpdateEventDTO) {\n    const events = await this.eventRepository.find({\n      where: {\n        id: eventID,\n      },\n    });\n    if (events.length === 0) {\n      throw new NotFoundException(`Could not find event: ${eventID}.`);\n    }\n    const protectList = ['id'];\n    protectList.forEach((key) => {\n      if (key in updatedEvent) {\n        delete updatedEvent[key];\n      }\n    });\n    await this.eventRepository.update({ id: eventID }, updatedEvent);\n  }\n\n  /**\n   * Delete a event by eventID.\n   * @param {string} eventID The event ID.\n   */\n  async deleteEvent(eventID: string): Promise {\n    const result = await this.eventRepository.delete(eventID);\n    if (result.affected === 0) {\n      throw new NotFoundException(`Event with ID ${eventID} not found.`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInterface {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  status: string;\n  message: string;\n  data: {\n    user: {\n      id: number;\n      first_name: string;\n      last_name: string;\n      email: string;\n    };\n    token: string;\n    expires_in: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ParticipantEntity.html":{"url":"entities/ParticipantEntity.html","title":"entity - ParticipantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ParticipantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/models/participant.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'event_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { EventEntity } from 'src/events/models/event.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\n\n@Entity()\nexport class ParticipantEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'pid' })\n  user: UserEntity;\n\n  @ManyToOne(() => EventEntity)\n  @JoinColumn({ name: 'event_id' })\n  event: EventEntity;\n\n  @Column()\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParticipantInterface.html":{"url":"interfaces/ParticipantInterface.html","title":"interface - ParticipantInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParticipantInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/models/participant.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            event_id\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            pid\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        event_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ParticipantInterface {\n  id: number;\n  pid: number;\n  event_id: number;\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ParticipantsController.html":{"url":"controllers/ParticipantsController.html","title":"controller - ParticipantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ParticipantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                participants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteParticipant\n                            \n                            \n                                    \n                                    Async\n                                inviteParticipant\n                            \n                            \n                                    \n                                    Async\n                                listParticipants\n                            \n                            \n                                    \n                                    Async\n                                updateParticipantDetails\n                            \n                            \n                                    \n                                    Async\n                                updateParticipantStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteParticipant(pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        inviteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    inviteParticipant(eventId: string, user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':eventId')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        listParticipants\n                        \n                    \n                \n            \n            \n                \n                        \n                    listParticipants(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':eventId')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateParticipantDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipantDetails(eventId: string, pid: number, user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':event_id/:pid')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateParticipantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipantStatus(pid: number, status: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('respond')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Patch,\n  Delete,\n  Get,\n  Param,\n  Body,\n  NotFoundException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { ParticipantsService } from './participant.service';\n\n@Controller('participants')\nexport class ParticipantsController {\n  // Injecting ParticipantsService\n  constructor(private readonly participantsService: ParticipantsService) {}\n\n  // Invite a participant to an event\n  @Post(':eventId')\n  async inviteParticipant(\n    @Param('eventId') eventId: string,  // Extract the 'eventId' parameter from the URL\n    @Body() user: { first_name: string; last_name: string; email: string },  // Extract user details from the request body\n  ) {\n    try {\n      // Use the service method to invite the participant\n      await this.participantsService.inviteParticipant(eventId, user);\n      return { message: 'Invitations sent successfully.' };\n    } catch (e) {\n      // Handle specific exceptions and re-throw them\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to invite the participant',\n        );\n      }\n    }\n  }\n\n  // Update the details of a participant in an event\n  @Patch(':event_id/:pid')\n  async updateParticipantDetails(\n    @Param('event_id') eventId: string,  // Extract event id from URL\n    @Param('pid') pid: number,  // Extract participant id from URL.\n    @Body() user: { first_name: string; last_name: string; email: string },  // Extract user details from request body\n  ) {\n    try {\n      // Use the service method to update participant details\n      const updatedUser = await this.participantsService.updateParticipant(\n        eventId,\n        pid,\n        user,\n      );\n      // Return the updated details\n      return {\n        first_name: updatedUser.first_name,\n        last_name: updatedUser.last_name,\n        email: updatedUser.email,\n      };\n    } catch (e) {\n      // Handle specific exceptions\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to update the participant',\n        );\n      }\n    }\n  }\n\n  // Delete a participant\n  @Delete(':pid')\n  async deleteParticipant(@Param('pid') pid: number) {  // Extract 'pid' from URL\n    try {\n      // Use the service method to delete the participant\n      await this.participantsService.deleteParticipant(pid);\n      return { message: 'Participant deleted successfully' };\n    } catch (e) {\n      // Handle exceptions\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to delete the participant',\n        );\n      }\n    }\n  }\n\n  // List participants of an event\n  @Get(':eventId')\n  async listParticipants(@Param('eventId') eventId: string) {\n    try {\n      // Fetch the participants using the service method\n      const participants =\n        await this.participantsService.listParticipants(eventId);\n      // Map over the results to shape the response\n      return participants.map((p) => ({\n        pid: p.id,\n        first_name: p.user.first_name,\n        last_name: p.user.last_name,\n        email: p.user.email,\n        status: p.status,\n      }));\n    } catch (e) {\n      // Handle exceptions\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException('Failed to fetch participants');\n      }\n    }\n  }\n\n  // Update the status of a participant\n  @Patch('respond')\n  async updateParticipantStatus(\n    @Body('pid') pid: number,\n    @Body('status') status: string,\n  ) {\n    try {\n      // Use the service method to update the participant's status\n      await this.participantsService.updateStatus(pid, status);\n      return {\n        message:\n          'Thank you for your response. We look forward to your participation!',\n      };\n    } catch (e) {\n      // Handle exceptions\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException('Failed to update the status');\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParticipantsModule.html":{"url":"modules/ParticipantsModule.html","title":"module - ParticipantsModule","body":"\n                   \n\n\n\n\n    Modules\n    ParticipantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\n\nParticipantsService\n\nParticipantsService\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/participants/participant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParticipantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ParticipantsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ParticipantsController } from './participant.controller';\nimport { ParticipantsService } from './participant.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ParticipantEntity } from './models/participant.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\nimport { EventEntity } from 'src/events/models/event.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ParticipantEntity, UserEntity, EventEntity]),\n  ],\n  controllers: [ParticipantsController],\n  providers: [ParticipantsService],\n})\nexport class ParticipantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParticipantsService.html":{"url":"injectables/ParticipantsService.html","title":"injectable - ParticipantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParticipantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteParticipant\n                            \n                            \n                                    Async\n                                inviteParticipant\n                            \n                            \n                                    Async\n                                listParticipants\n                            \n                            \n                                    Async\n                                updateParticipant\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(participantRepository: Repository, userRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/participants/participant.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        participantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteParticipant(pid: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        inviteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    inviteParticipant(eventId: string, user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listParticipants\n                        \n                    \n                \n            \n            \n                \n                        \n                    listParticipants(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipant(eventId: string, pid: number, user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(pid: number, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  InternalServerErrorException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ParticipantEntity } from './models/participant.entity';\n\nimport { EventEntity } from 'src/events/models/event.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\n\n\n@Injectable()\nexport class ParticipantsService {\n  // Injects the repositories for participant, user, and event entities\n  constructor(\n    @InjectRepository(ParticipantEntity)\n    private participantRepository: Repository,\n    @InjectRepository(UserEntity)\n    private userRepository: Repository,\n    @InjectRepository(EventEntity)\n    private readonly eventRepository: Repository,\n  ) {}\n\n  // Invite a participant to a given event.\n  async inviteParticipant(\n    eventId: string,\n    user: { first_name: string; last_name: string; email: string },\n  ): Promise {\n    // Retrieve the event from the database\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n    });\n\n    // Throw an exception if the event is not found\n    if (!event) {\n      throw new NotFoundException(`Event not found`);\n    }\n\n    // Check if the user with the provided email exists\n    const foundUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    // Throw an exception if the user is not found\n    if (!foundUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Check if the user is already a participant for the event\n    const existingParticipant = await this.participantRepository.findOne({\n      where: {\n        event: event,\n        user: foundUser,\n      },\n    });\n\n    // Throw a conflict exception if the user is already a participant\n    if (existingParticipant) {\n      throw new ConflictException('Participant already exists in the event');\n    }\n\n    // Create a new participant and associate it with the user and event\n    const newParticipant = new ParticipantEntity();\n    newParticipant.event = event;\n    newParticipant.user = foundUser;\n    newParticipant.status = 'invited';\n\n    // Save the new participant to the database\n    try {\n      await this.participantRepository.save(newParticipant);\n    } catch (e) {\n      throw new InternalServerErrorException(\n        'Failed to invite the participant',\n      );\n    }\n  }\n\n  // Update details of an existing participant\n  async updateParticipant(\n    eventId: string,\n    pid: number,\n    user: { first_name: string; last_name: string; email: string },\n  ): Promise {\n    // Retrieve the event from the database\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n    });\n\n    // Throw an exception if the event is not found\n    if (!event) {\n      throw new NotFoundException(`Event not found`);\n    }\n\n    // Check if the user is a participant of the given event\n    const participant = await this.participantRepository.findOne({\n      where: {\n        user: { id: pid },\n        event: { id: eventId },\n      },\n    });\n\n    // Throw an exception if the user is not associated with the event\n    if (!participant) {\n      throw new NotFoundException(`Participant not associated with this event`);\n    }\n\n    // Retrieve the user from the database using the participant ID\n    const foundUser = await this.userRepository.findOne({ where: { id: pid } });\n\n    // Throw an exception if the user is not found\n    if (!foundUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    // Update the user's details\n    foundUser.first_name = user.first_name;\n    foundUser.last_name = user.last_name;\n    foundUser.email = user.email;\n\n    // Save the updated user details to the database\n    return await this.userRepository.save(foundUser);\n  }\n\n  // Delete a participant\n  async deleteParticipant(pid: number): Promise {\n    const result = await this.participantRepository.delete(pid);\n    // Throw an exception if no rows were affected\n    if (result.affected === 0) {\n      throw new NotFoundException('Participant not found');\n    }\n  }\n\n  // Retrieve a list of participants for a given event\n  async listParticipants(eventId: string): Promise {\n    // Find all participants associated with the event and return them along with their user details\n    return await this.participantRepository.find({\n      where: { event: { id: eventId } },\n      relations: ['user'],\n    });\n  }\n\n  // Update a participant's response status\n  async updateStatus(pid: number, status: string): Promise {\n    // Retrieve the participant from the database\n    const participant = await this.participantRepository.findOne({\n      where: { id: pid },\n    });\n\n    // Throw an exception if the participant is not found\n    if (!participant) {\n      throw new NotFoundException('Participant not found');\n    }\n\n    // Update the participant's status\n    participant.status = status;\n\n    // Save the updated status to the database\n    await this.participantRepository.save(participant);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDTO.html":{"url":"classes/RegisterUserDTO.html","title":"class - RegisterUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                first_name\n                            \n                            \n                                    \n                                    \n                                last_name\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class UpdateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\nexport class RegisterUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEventDTO.html":{"url":"classes/UpdateEventDTO.html","title":"class - UpdateEventDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEventDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                desc\n                            \n                            \n                                    \n                                    \n                                end_time\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                    \n                                start_time\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        end_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsNumber, IsDateString } from 'class-validator';\n\nexport class CreateEventDTO {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  desc: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  start_time: Date;\n\n  @IsNotEmpty()\n  @IsDateString()\n  end_time: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  host: number;\n}\n\nexport class UpdateEventDTO {\n  @IsNotEmpty()\n  @IsString()\n  title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  desc: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  start_time: Date;\n\n  @IsNotEmpty()\n  @IsDateString()\n  end_time: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  location: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                first_name\n                            \n                            \n                                    \n                                    \n                                last_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsEmail } from 'class-validator';\n\nexport class UpdateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n}\n\nexport class RegisterUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  first_name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  last_name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(pid: number, user: UpdateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Param,\n  Patch,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UsersService } from './user.service';\nimport { RegisterUserDTO, UpdateUserDTO } from './models/user.dto';\n\n@Controller('users')\nexport class UserController {\n  // Dependency injection of the UsersService\n  constructor(private usersService: UsersService) {}\n\n  // User registration\n  @Post('register')\n  async register(@Body() user: RegisterUserDTO) {\n    await this.usersService.register(user);\n    return { message: 'User registered successfully' };\n  }\n\n  // User login\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() data: { email: string; password: string }) {\n    const result = await this.usersService.login(data.email, data.password);\n    return result;\n  }\n\n  // Retrieve user details by their ID\n  @Get(':pid')\n  async getUser(@Param('pid') pid: number) {\n    const user = await this.usersService.getUser(pid);\n    const { password, ...result } = user;\n    return result;\n  }\n\n  // Update user details by their ID\n  @Patch(':pid')\n  async updateUser(@Param('pid') pid: number, @Body() user: UpdateUserDTO) {\n    await this.usersService.updateUser(pid, user);\n    return {\n      status: HttpStatus.OK,\n      message: 'User updated successfully',\n    };\n  }\n\n  // Delete a user by their ID.\n  @Delete(':pid')\n  async deleteUser(@Param('pid') pid: number) {\n    await this.usersService.deleteUser(pid);\n    return { status: HttpStatus.OK, message: 'User deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                first_name\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                last_name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  first_name: string;\n\n  @Column()\n  last_name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            first_name\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            last_name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        first_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInterface {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  status: string;\n  message: string;\n  data: {\n    user: {\n      id: number;\n      first_name: string;\n      last_name: string;\n      email: string;\n    };\n    token: string;\n    expires_in: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserController } from './user.controller';\nimport { UsersService } from './user.service';\nimport { UserEntity } from './models/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  controllers: [UserController],\n  providers: [UsersService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, updatedUser: UpdateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedUser\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EntityNotFoundError, Repository } from 'typeorm';\nimport { UserEntity } from './models/user.entity';\nimport { LoginResponse } from './models/user.interface';\nimport { RegisterUserDTO, UpdateUserDTO } from './models/user.dto';\n\n@Injectable()\nexport class UsersService {\n  // Injection of the UserEntity repository\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepository: Repository,\n  ) {}\n\n  async register(user: RegisterUserDTO): Promise {\n\n    // Check if the user with the provided email already exists\n\n    const existUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    if (existUser) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.CONFLICT,\n      );\n    }\n\n    try {\n\n      // Save the new user to the database\n\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw new HttpException(\n        'Registration failed',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async login(email: string, password: string): Promise {\n    // Find the user with the provided email\n    const user = await this.userRepository.findOne({\n      where: { email },\n    });\n\n    // Check if the user exists and the password matches\n\n    if (!user || user.password !== password) {\n      throw new HttpException(\n        'Invalid email or password',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n\n    const { password: _, ...userData } = user;\n    const response: LoginResponse = {\n      status: 'success',\n      message: 'Logged in successfully',\n      data: {\n        user: userData,\n        token: 'alnlgsnsoajg',\n        expires_in: 3600,\n      },\n    };\n\n    return response;\n  }\n\n  async getUser(id: number): Promise {\n    try {\n      return await this.userRepository.findOneOrFail({ where: { id } });\n    } catch (error) {\n      if (error instanceof EntityNotFoundError) {\n        throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n      }\n      throw new HttpException(\n        'Internal server error',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async updateUser(\n    id: number,\n    updatedUser: UpdateUserDTO,\n  ): Promise {\n    // Check if the user with the provided ID exists\n    const user = await this.userRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    try {\n      // Update the user details in the database\n\n      await this.userRepository.update(id, updatedUser);\n      return this.userRepository.findOne({ where: { id } });\n    } catch (error) {\n      throw new HttpException(\n        'Failed to update user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async deleteUser(id: number): Promise {\n\n    // Check if the user with the provided ID exists\n\n    const user = await this.userRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n    }\n\n    try {\n\n      // Delete the user from the database\n\n      const result = await this.userRepository.delete(id);\n      return result.affected > 0;\n    } catch (error) {\n      throw new HttpException(\n        'Error deleting user',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/events/models/event.dto.ts\n            \n            class\n            CreateEventDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/events/models/event.dto.ts\n            \n            class\n            UpdateEventDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/events/models/event.entity.ts\n            \n            entity\n            EventEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/events/models/event.interface.ts\n            \n            interface\n            EventInterface\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            initAlias\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/models/participant.entity.ts\n            \n            entity\n            ParticipantEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/models/participant.interface.ts\n            \n            interface\n            ParticipantInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/participants/participant.controller.ts\n            \n            controller\n            ParticipantsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/participants/participant.service.ts\n            \n            injectable\n            ParticipantsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/user.dto.ts\n            \n            class\n            RegisterUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/models/user.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            UserInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            module-alias : ^2.2.3\n        \n            mysql2 : ^3.6.1\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            initAlias   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initAlias\n                        \n                    \n                \n            \n            \n                \ninitAlias()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEvent Management Service\nDescription\nA a backend service for event management that facilitates the creation, management, and eventual automatic deletion of events.\nStart Docker\nWe use docker for our service, you can use docker-compose to start the service in dev module without installing the dependencies.\nExample :$ sudo docker-compose up --build\nAPI Documentation\nSwagger API Documentation\nInstallation\nExample :$ pnpm installRunning the service\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodBuild the service\nExample :# development\n$ pnpm buildTest\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covLinting and formatting\nExample :# Lint and autofix with eslint\n$ pnpm run lint\n\n# Format with prettier\n$ pnpm run format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParticipantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nParticipantsService\n\nParticipantsService\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
