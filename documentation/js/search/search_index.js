var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.112,1,1.881]],["body/controllers/AppController.html",[0,1.783,1,3.016,2,1.426,3,0.477,4,0.477,5,0.411,6,3.188,7,0.62,8,1.967,9,4.555,10,1.738,11,0.038,12,1.174,13,3.862,14,1.573,15,0.976,16,0.976,17,0.963,18,2.628,19,3.188,20,0.477,21,0.78,22,2.412,23,2.744,24,1.573,25,3.862,26,0.03,27,0.03]],["title/modules/AppModule.html",[28,1.009,29,1.881]],["body/modules/AppModule.html",[1,2.86,2,1.478,3,0.359,4,0.359,5,0.309,11,0.038,16,1.129,17,0.723,18,2.671,19,2.396,20,0.359,21,0.586,26,0.025,27,0.025,28,1.535,29,3.651,30,1.306,31,1.182,32,1.614,33,1.614,34,1.306,35,2.546,36,1.614,37,2.396,38,2.396,39,2.396,40,2.976,41,2.976,42,2.976,43,2.225,44,1.614,45,1.614,46,2.903,47,2.499,48,2.903,49,2.903,50,2.903,51,2.903,52,2.903,53,2.396,54,1.813,55,1.182,56,2.903,57,2.903,58,2.86,59,2.903,60,0.586,61,2.903,62,2.903,63,2.903,64,2.903,65,2.903]],["title/injectables/AppService.html",[18,1.503,66,1.112]],["body/injectables/AppService.html",[3,0.501,4,0.501,5,0.431,7,0.65,8,2.026,9,4.632,11,0.037,12,1.232,14,1.65,15,1.005,16,0.818,17,1.01,18,2.481,20,0.501,21,0.818,24,1.65,26,0.031,27,0.031,66,1.837,67,2.252,68,3.344,69,4.051,70,4.051,71,4.051]],["title/entities/EventEntity.html",[72,1.356,73,1.227]],["body/entities/EventEntity.html",[3,0.368,4,0.368,5,0.317,7,0.478,10,2.428,11,0.038,12,1.64,15,1.136,16,0.602,20,0.368,21,0.602,26,0.025,27,0.025,58,3.512,60,1.09,72,1.833,73,1.659,74,1.86,75,2.459,76,1.504,77,3.831,78,3.831,79,1.411,80,3.831,81,3.831,82,3.831,83,4.99,84,2.978,85,4.119,86,2.978,87,3.298,88,2.978,89,2.978,90,2.978,91,3.924,92,2.978,93,1.341,94,4.99]],["title/interfaces/EventInterface.html",[95,1.112,96,1.675]],["body/interfaces/EventInterface.html",[3,0.437,4,0.437,5,0.376,7,0.567,11,0.037,15,1.218,20,0.437,26,0.028,27,0.028,60,1.144,76,1.685,77,4.408,78,4.408,79,1.624,80,4.408,81,4.408,82,4.408,85,4.674,95,1.305,96,2.537,97,1.964,98,2.916]],["title/controllers/EventsController.html",[0,1.112,99,1.881]],["body/controllers/EventsController.html",[0,0.823,2,0.823,3,0.275,4,0.275,5,0.237,7,0.358,8,1.349,10,2.103,11,0.038,12,1.421,14,1.995,15,1.094,16,0.884,17,0.555,20,0.275,21,0.45,22,1.392,24,1.903,26,0.02,27,0.02,58,2.068,60,0.884,79,1.007,96,2.432,99,2.068,100,1.839,101,1.839,102,1.583,103,3.311,104,4.373,105,2.733,106,3.311,107,3.261,108,2.228,109,2.807,110,2.228,111,2.182,112,1.968,113,2.182,114,3.011,115,4.185,116,2.228,117,1.839,118,3.311,119,2.228,120,3.324,121,2.228,122,3.311,123,2.228,124,3.311,125,1.583,126,4.373,127,3.311,128,1.349,129,1.839,130,2.468,131,3.311,132,2.228,133,2.352,134,2.352,135,2.228,136,1.392,137,1.583,138,1.971,139,1.839,140,1.839,141,2.228,142,2.228,143,2.228,144,2.228,145,2.228,146,2.228,147,2.228,148,2.228,149,2.228,150,2.228,151,2.228]],["title/modules/EventsModule.html",[28,1.009,40,1.675]],["body/modules/EventsModule.html",[2,1.685,3,0.437,4,0.437,5,0.376,11,0.038,16,1.117,17,0.881,20,0.437,21,0.714,26,0.028,27,0.028,28,1.693,30,1.59,31,1.439,32,1.964,33,1.964,34,1.59,35,2.81,36,1.964,40,3.149,43,2.537,44,1.964,45,1.964,47,2.207,54,2.207,55,1.439,73,1.439,99,3.156,138,2.825,139,2.916,152,2.916,153,2.916,154,3.533,155,3.533,156,2.916,157,3.533]],["title/injectables/EventsService.html",[66,1.112,138,1.503]],["body/injectables/EventsService.html",[3,0.27,4,0.27,5,0.233,7,0.351,8,1.329,11,0.038,12,1.478,14,1.888,15,1.07,16,0.982,17,0.545,20,0.27,21,0.442,24,1.591,26,0.02,27,0.02,55,0.89,60,0.937,66,1.205,67,1.215,73,0.89,79,1.187,93,0.984,96,2.409,102,1.553,105,2.694,107,2.694,111,2.313,112,2.086,113,2.313,114,2.409,115,3.826,117,2.694,120,3.037,129,2.694,130,2.44,136,1.365,137,1.553,138,1.628,140,1.804,156,1.804,158,1.804,159,3.264,160,2.172,161,4.332,162,3.264,163,2.319,164,2.186,165,3.078,166,2.186,167,3.264,168,3.264,169,2.186,170,3.264,171,2.186,172,1.553,173,2.186,174,3.264,175,2.186,176,4.635,177,2.186,178,1.215,179,1.553,180,1.804,181,1.553,182,2.186,183,2.186,184,2.172,185,1.215,186,3.264,187,2.186,188,1.365,189,2.039,190,1.815,191,2.186,192,1.804,193,2.186,194,2.186,195,2.186,196,2.186,197,2.186,198,2.186,199,2.186,200,2.186,201,2.186]],["title/interfaces/LoginResponse.html",[95,1.112,202,1.675]],["body/interfaces/LoginResponse.html",[3,0.427,4,0.427,5,0.368,7,0.554,11,0.037,15,1.225,20,0.556,26,0.028,27,0.028,60,1.109,76,1.66,79,1.367,95,1.66,97,1.92,128,2.156,202,2.499,203,2.453,204,3.307,205,2.944,206,2.807,207,1.723,208,1.846,209,2.499,210,2.499,211,2.023,212,1.92,213,1.554,214,2.453,215,2.453]],["title/entities/ParticipantEntity.html",[72,1.356,216,1.675]],["body/entities/ParticipantEntity.html",[3,0.388,4,0.388,5,0.335,7,0.505,10,2.296,11,0.038,12,1.551,15,0.853,16,0.964,20,0.388,21,0.635,26,0.026,27,0.026,60,1.031,72,1.901,73,2.078,74,1.963,76,1.56,79,1.451,87,3.39,91,3.39,93,1.415,112,1.901,114,2.653,128,1.943,208,1.56,213,2.147,216,2.349,217,2.594,218,4.224,219,3.487,220,3.143,221,3.143,222,3.143,223,2.078,224,2.349,225,3.143,226,4.771,227,4.771,228,2.233,229,2.233]],["title/interfaces/ParticipantInterface.html",[95,1.112,230,2.14]],["body/interfaces/ParticipantInterface.html",[3,0.469,4,0.469,5,0.405,7,0.61,11,0.036,15,1.056,20,0.469,26,0.029,27,0.029,60,1.108,76,1.764,79,1.668,95,1.402,97,2.112,128,2.234,208,2.207,219,4.528,224,3.05,230,3.394,231,3.135]],["title/controllers/ParticipantsController.html",[0,1.112,232,1.881]],["body/controllers/ParticipantsController.html",[0,0.893,2,0.55,3,0.184,4,0.184,5,0.159,7,0.239,8,0.985,10,1.741,11,0.038,12,1.176,14,1.576,15,1.143,16,0.489,17,0.371,20,0.184,21,0.301,22,0.93,23,1.058,24,1.433,26,0.015,27,0.015,60,0.95,109,1.058,111,1.93,112,1.741,113,1.93,120,3.089,128,1.688,133,2.17,134,1.058,136,1.511,160,2.931,172,2.499,178,2.304,184,1.345,185,2.151,189,3.019,190,2.687,205,1.345,206,2.197,208,1.737,209,1.956,210,1.956,211,1.583,213,2.047,224,2.804,232,1.511,233,1.229,234,2.522,235,2.522,236,1.997,237,3.055,238,3.055,239,1.229,240,2.419,241,1.489,242,1.229,243,2.419,244,1.489,245,1.229,246,2.419,247,1.489,248,1.489,249,2.419,250,1.489,251,1.489,252,2.419,253,1.489,254,1.229,255,2.903,256,1.524,257,1.229,258,3.055,259,3.193,260,1.489,261,1.489,262,1.489,263,1.058,264,3.193,265,3.989,266,3.868,267,3.868,268,2.522,269,1.229,270,2.522,271,1.997,272,1.058,273,1.489,274,1.489,275,1.489,276,1.489,277,2.419,278,1.489,279,1.489,280,2.419,281,1.489,282,1.489,283,1.489,284,1.489,285,1.489,286,1.489,287,2.419,288,1.489,289,1.489,290,1.489,291,1.489,292,1.489,293,1.489,294,1.229,295,1.489,296,1.489,297,1.489]],["title/modules/ParticipantsModule.html",[28,1.009,41,1.675]],["body/modules/ParticipantsModule.html",[2,1.628,3,0.414,4,0.414,5,0.357,11,0.038,16,1.15,17,0.835,20,0.414,21,0.677,26,0.027,27,0.027,28,1.651,30,1.508,31,1.365,32,1.863,33,1.863,34,1.508,35,2.739,36,1.863,41,3.104,43,2.451,44,1.863,45,1.863,47,2.093,54,2.093,55,1.365,73,1.795,216,1.863,223,1.795,228,2.381,229,2.381,232,3.077,256,2.785,257,2.766,298,2.766,299,2.766,300,3.351,301,3.351,302,2.766,303,3.351]],["title/injectables/ParticipantsService.html",[66,1.112,256,1.503]],["body/injectables/ParticipantsService.html",[3,0.171,4,0.171,5,0.148,7,0.223,8,0.93,11,0.038,12,1.218,14,1.518,15,1.13,16,0.81,17,0.346,20,0.171,21,0.28,23,0.986,24,0.93,26,0.014,27,0.014,55,0.565,60,0.954,66,0.843,67,0.771,73,0.565,79,1.435,93,0.624,111,1.999,112,1.804,113,1.999,114,2.625,120,3.192,128,1.373,160,2.881,163,1.622,165,3.354,178,0.771,179,0.986,180,1.145,181,2.067,184,2.46,185,2.69,188,0.867,189,2.764,190,2.549,192,3.308,206,2.105,208,1.693,209,1.269,210,1.269,211,1.309,213,2.124,216,1.269,223,0.565,224,2.797,228,0.986,229,0.986,234,1.884,235,2.401,236,1.884,239,1.884,242,1.145,245,1.884,255,1.884,256,1.139,259,1.145,264,1.145,265,1.145,268,1.145,269,1.145,270,3.075,302,1.145,304,1.145,305,2.909,306,2.909,307,1.387,308,2.401,309,2.909,310,1.387,311,2.283,312,1.387,313,3.896,314,1.387,315,1.387,316,1.387,317,1.387,318,1.387,319,1.387,320,1.387,321,1.145,322,2.283,323,2.283,324,3.726,325,1.884,326,1.884,327,2.283,328,1.387,329,1.387,330,1.387,331,1.387,332,1.387,333,1.387,334,2.283,335,1.387,336,1.387,337,1.387,338,1.387,339,1.387,340,1.387,341,1.387,342,1.387,343,0.986,344,1.387,345,1.145,346,2.283,347,1.387,348,1.387,349,1.387,350,1.387]],["title/controllers/UserController.html",[0,1.112,351,1.881]],["body/controllers/UserController.html",[0,0.729,2,0.729,3,0.244,4,0.244,5,0.21,7,0.317,8,1.23,10,1.995,11,0.038,12,1.348,14,1.805,15,0.61,16,0.741,17,0.492,20,0.244,21,0.399,22,1.232,24,1.805,26,0.019,27,0.019,60,0.983,101,1.628,109,1.402,111,2.212,112,1.995,113,2.212,130,2.292,133,2.146,134,1.402,136,1.232,160,3.111,172,3.149,178,1.097,184,2.6,185,2.465,189,1.232,190,1.097,204,1.887,205,2.041,206,1.887,207,2.052,208,1.9,211,0.888,212,1.679,213,2.438,224,2.6,254,1.628,263,2.607,271,1.628,272,1.402,343,3.322,351,1.887,352,1.628,353,2.493,354,2.493,355,2.493,356,2.493,357,3.029,358,1.973,359,3.02,360,1.973,361,1.973,362,3.02,363,1.973,364,1.973,365,1.973,366,1.973,367,1.628,368,3.02,369,1.973,370,1.973,371,3.02,372,1.973,373,1.973,374,1.973,375,1.973,376,1.973,377,1.973,378,1.973,379,1.831,380,1.628,381,1.628,382,1.973,383,1.973,384,1.973,385,1.973,386,1.973,387,1.973,388,1.973,389,1.973,390,1.973,391,1.973,392,1.973,393,1.973,394,1.973,395,1.973,396,1.973,397,1.973,398,1.973,399,3.02,400,1.973]],["title/entities/UserEntity.html",[72,1.356,223,1.227]],["body/entities/UserEntity.html",[3,0.401,4,0.401,5,0.346,7,0.521,10,2.421,11,0.037,12,1.635,15,1.158,16,0.655,20,0.401,21,0.655,26,0.027,27,0.027,58,2.695,60,1.087,72,1.942,74,2.026,76,1.593,79,1.474,87,3.444,91,4.073,93,1.46,208,1.593,209,2.695,210,2.695,211,2.182,212,2.695,223,1.757,401,2.677,402,3.243,403,3.243,404,3.243,405,3.243,406,3.243,407,3.243,408,3.243]],["title/interfaces/UserInterface.html",[95,1.112,207,1.503]],["body/interfaces/UserInterface.html",[3,0.408,4,0.408,5,0.352,7,0.53,11,0.037,15,1.236,20,0.54,26,0.027,27,0.027,60,1.093,76,1.612,79,1.645,95,1.612,97,1.836,128,1.345,202,1.836,203,2.346,204,2.063,205,1.836,207,2.178,208,1.998,209,3.009,210,3.009,211,2.435,212,2.893,213,1.486,214,2.346,215,2.346]],["title/modules/UserModule.html",[28,1.009,42,1.675]],["body/modules/UserModule.html",[2,1.685,3,0.437,4,0.437,5,0.376,11,0.038,16,1.117,17,0.881,20,0.437,21,0.714,26,0.028,27,0.028,28,1.693,30,1.59,31,1.439,32,1.964,33,1.964,34,1.59,35,2.81,36,1.964,42,3.149,43,2.537,44,1.964,45,1.964,47,2.207,54,2.207,55,1.439,223,1.439,351,3.156,379,2.825,380,2.916,409,2.916,410,2.916,411,3.533,412,3.533,413,2.916,414,3.533]],["title/injectables/UsersService.html",[66,1.112,379,1.503]],["body/injectables/UsersService.html",[3,0.233,4,0.233,5,0.201,7,0.302,8,1.187,11,0.038,12,1.395,14,1.768,15,0.927,16,0.927,17,0.469,20,0.233,21,0.381,24,2.014,26,0.018,27,0.018,55,0.767,60,0.927,66,1.076,67,1.047,79,1.455,93,0.848,111,2.29,112,2.065,113,2.29,128,0.767,130,2.226,160,3.083,163,2.07,165,2.851,178,1.047,179,1.338,181,1.338,184,2.552,185,2.413,188,1.176,202,1.62,204,1.176,205,1.047,207,2.002,208,1.874,211,1.604,212,2.413,213,2.154,214,1.338,215,1.338,223,0.767,263,1.338,272,2.851,294,2.405,308,2.405,313,4.28,321,1.554,325,3.582,326,1.554,343,1.338,345,1.554,353,2.405,354,2.405,355,2.405,356,2.405,357,2.942,367,2.405,379,1.454,381,2.405,413,1.554,415,1.554,416,1.883,417,1.883,418,2.914,419,1.883,420,2.914,421,1.883,422,2.914,423,1.883,424,1.883,425,1.883,426,1.883,427,2.914,428,3.564,429,1.883,430,2.914,431,1.883,432,1.883,433,1.883,434,1.883,435,1.883,436,1.883]],["title/coverage.html",[437,2.916]],["body/coverage.html",[0,1.871,1,1.93,5,0.329,6,2.55,11,0.037,18,1.542,26,0.026,27,0.026,34,1.391,60,0.624,66,1.871,68,2.55,72,2.129,73,1.258,75,2.55,95,1.871,96,1.718,98,2.55,99,1.93,100,2.55,138,1.542,158,2.55,188,3.751,190,1.718,202,1.718,203,2.967,207,1.542,216,1.718,217,2.55,223,1.258,230,2.195,231,2.55,232,1.93,233,2.55,256,1.542,304,2.55,351,1.93,352,2.55,379,1.542,401,2.55,415,2.55,437,2.195,438,2.55,439,3.09,440,3.09,441,4.175,442,3.09,443,3.09,444,5.066,445,5.066,446,2.55,447,3.09,448,3.09,449,4.73,450,3.09,451,3.09,452,3.09]],["title/dependencies.html",[31,1.475,453,2.079]],["body/dependencies.html",[11,0.038,17,1.019,26,0.031,27,0.031,31,1.665,53,3.374,55,1.665,93,1.839,137,2.904,454,5.629,455,4.087,456,4.087,457,4.087,458,4.087,459,4.087,460,4.087,461,4.087,462,4.087,463,4.087,464,4.087,465,4.087,466,4.087,467,4.087]],["title/miscellaneous/functions.html",[468,2.079,469,2.989]],["body/miscellaneous/functions.html",[7,0.739,11,0.033,26,0.033,27,0.033,34,2.558,446,3.799,468,3.799,469,3.799,470,4.603]],["title/index.html",[7,0.404,471,2.518,472,2.518]],["body/index.html",[11,0.038,26,0.025,27,0.025,28,1.001,31,1.217,102,2.123,114,2.27,125,2.123,437,2.123,438,2.467,473,4.649,474,5.4,475,2.988,476,2.988,477,2.988,478,2.988,479,2.988,480,2.988,481,4.649,482,4.996,483,4.082,484,4.082,485,2.988,486,2.988,487,2.988,488,5.4,489,2.988,490,2.988,491,2.988,492,4.082,493,2.988,494,2.988,495,2.988,496,5.772,497,2.988,498,4.082,499,5.627,500,2.988,501,4.082,502,2.988,503,2.988,504,2.988,505,2.988,506,2.988,507,4.082,508,4.082,509,2.988,510,2.988,511,2.988,512,2.988,513,4.082,514,2.988,515,2.988,516,4.082,517,2.988]],["title/modules.html",[30,1.847]],["body/modules.html",[11,0.032,26,0.032,27,0.032,29,2.698,30,1.944,40,2.402,41,2.402,42,2.402,518,5.735,519,5.735,520,5.735,521,5.735]],["title/overview.html",[522,3.388]],["body/overview.html",[2,1.27,11,0.036,18,2.489,26,0.028,27,0.028,28,1.153,29,3.699,30,1.548,31,1.401,32,1.912,33,1.912,34,1.548,35,1.912,36,1.912,37,2.839,38,2.839,39,2.839,40,3.049,41,3.049,42,3.049,43,2.493,44,1.912,45,1.912,67,1.912,74,2.148,97,1.912,138,2.489,152,2.839,153,2.839,256,2.489,298,2.839,299,2.839,379,2.489,409,2.839,410,2.839,522,2.839,523,5.286,524,3.439]],["title/properties.html",[76,1.337,453,2.079]],["body/properties.html",[11,0.037,26,0.033,27,0.033,76,1.675,125,3.221,525,4.534,526,4.534,527,4.534,528,4.534,529,4.534]],["title/routes.html",[530,3.388]],["body/routes.html",[11,0.034,26,0.034,27,0.034,530,3.939]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":188,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":526,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["0.3.17",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":442,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":524,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["3.6.1",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["4",{"_index":523,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["8.11.3",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["alnlgsnsoajg",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["already",{"_index":386,"title":{},"body":{"controllers/UserController.html":{}}}],["api",{"_index":492,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["associated",{"_index":336,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["async",{"_index":160,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["author",{"_index":529,"title":{},"body":{"properties.html":{}}}],["autofix",{"_index":514,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":479,"title":{},"body":{"index.html":{}}}],["await",{"_index":185,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":475,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":373,"title":{},"body":{"controllers/UserController.html":{}}}],["body",{"_index":133,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["body('event_id",{"_index":289,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["body('pid",{"_index":290,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["body('status",{"_index":291,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["boolean",{"_index":127,"title":{},"body":{"controllers/EventsController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":521,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":518,"title":{},"body":{"modules.html":{}}}],["build",{"_index":491,"title":{},"body":{"index.html":{}}}],["buildtest",{"_index":505,"title":{},"body":{"index.html":{}}}],["catch",{"_index":264,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["class",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":152,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_providers",{"_index":153,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule",{"_index":298,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_participantsmodule_providers",{"_index":299,"title":{},"body":{"modules/ParticipantsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":409,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":410,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":91,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}}}],["column({nullable",{"_index":83,"title":{},"body":{"entities/EventEntity.html":{}}}],["column({unique",{"_index":402,"title":{},"body":{"entities/UserEntity.html":{}}}],["compose",{"_index":484,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":375,"title":{},"body":{"controllers/UserController.html":{}}}],["conflictexception('email",{"_index":385,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":184,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":163,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["constructor(eventrepostitory",{"_index":164,"title":{},"body":{"injectables/EventsService.html":{}}}],["constructor(participantrepository",{"_index":307,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["constructor(userrepository",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('events",{"_index":141,"title":{},"body":{"controllers/EventsController.html":{}}}],["controller('user",{"_index":382,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":437,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createevent",{"_index":103,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent(@body",{"_index":142,"title":{},"body":{"controllers/EventsController.html":{}}}],["createevent(event",{"_index":108,"title":{},"body":{"controllers/EventsController.html":{}}}],["creation",{"_index":477,"title":{},"body":{"index.html":{}}}],["data",{"_index":204,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["data.password",{"_index":393,"title":{},"body":{"controllers/UserController.html":{}}}],["date",{"_index":85,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":136,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":122,"title":{},"body":{"controllers/EventsController.html":{}}}],["delete(':pid",{"_index":359,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('deleteparticipant/:event_id/:pid",{"_index":240,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["deleted",{"_index":399,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteevent",{"_index":159,"title":{},"body":{"injectables/EventsService.html":{}}}],["deleteevent(eventid",{"_index":168,"title":{},"body":{"injectables/EventsService.html":{}}}],["deleteparticipant",{"_index":234,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["deleteparticipant(eventid",{"_index":239,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["deleteuser",{"_index":353,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@param('pid",{"_index":398,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(pid",{"_index":358,"title":{},"body":{"controllers/UserController.html":{}}}],["deletion",{"_index":480,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["desc",{"_index":77,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["description",{"_index":125,"title":{},"body":{"controllers/EventsController.html":{},"index.html":{},"properties.html":{}}}],["dev",{"_index":485,"title":{},"body":{"index.html":{}}}],["development",{"_index":498,"title":{},"body":{"index.html":{}}}],["docker",{"_index":482,"title":{},"body":{"index.html":{}}}],["docmentation",{"_index":494,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":438,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["e",{"_index":265,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["e2e",{"_index":509,"title":{},"body":{"index.html":{}}}],["email",{"_index":211,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["end_time",{"_index":78,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["entities",{"_index":74,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entity",{"_index":72,"title":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["eslint",{"_index":515,"title":{},"body":{"index.html":{}}}],["event",{"_index":114,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"injectables/ParticipantsService.html":{},"index.html":{}}}],["event_id",{"_index":219,"title":{},"body":{"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{}}}],["evententity",{"_index":73,"title":{"entities/EventEntity.html":{}},"body":{"entities/EventEntity.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["eventid",{"_index":120,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["eventinterface",{"_index":96,"title":{"interfaces/EventInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"coverage.html":{}}}],["eventrepository",{"_index":309,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["eventrepostitory",{"_index":167,"title":{},"body":{"injectables/EventsService.html":{}}}],["events",{"_index":102,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"index.html":{}}}],["events.controller",{"_index":155,"title":{},"body":{"modules/EventsModule.html":{}}}],["events.length",{"_index":187,"title":{},"body":{"injectables/EventsService.html":{}}}],["events.service",{"_index":139,"title":{},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{}}}],["events/events.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["events[0",{"_index":193,"title":{},"body":{"injectables/EventsService.html":{}}}],["eventscontroller",{"_index":99,"title":{"controllers/EventsController.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["eventsmodule",{"_index":40,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventsservice",{"_index":138,"title":{"injectables/EventsService.html":{}},"body":{"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"coverage.html":{},"overview.html":{}}}],["eventual",{"_index":478,"title":{},"body":{"index.html":{}}}],["example",{"_index":488,"title":{},"body":{"index.html":{}}}],["exists",{"_index":387,"title":{},"body":{"controllers/UserController.html":{}}}],["existuser",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["expires_in",{"_index":215,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["facilitates",{"_index":476,"title":{},"body":{"index.html":{}}}],["failed",{"_index":268,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["fetch",{"_index":288,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":195,"title":{},"body":{"injectables/EventsService.html":{}}}],["first_name",{"_index":209,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{}}}],["forbiddenexception",{"_index":376,"title":{},"body":{"controllers/UserController.html":{}}}],["format",{"_index":516,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":512,"title":{},"body":{"index.html":{}}}],["forward",{"_index":296,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["found",{"_index":192,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["founduser",{"_index":324,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.email",{"_index":341,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.first_name",{"_index":337,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["founduser.last_name",{"_index":339,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["from(this.eventrepostitory.find",{"_index":183,"title":{},"body":{"injectables/EventsService.html":{}}}],["from(this.eventrepostitory.save(event",{"_index":182,"title":{},"body":{"injectables/EventsService.html":{}}}],["from(this.eventsservice.getevent(eventid",{"_index":146,"title":{},"body":{"controllers/EventsController.html":{}}}],["function",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":469,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":118,"title":{},"body":{"controllers/EventsController.html":{}}}],["get(':pid",{"_index":362,"title":{},"body":{"controllers/UserController.html":{}}}],["get('events/:event_id/participants",{"_index":246,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["getallevents",{"_index":104,"title":{},"body":{"controllers/EventsController.html":{}}}],["getevent",{"_index":105,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["getevent(@param('id",{"_index":145,"title":{},"body":{"controllers/EventsController.html":{}}}],["getevent(eventid",{"_index":117,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["getevents",{"_index":161,"title":{},"body":{"injectables/EventsService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":471,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":354,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["getuser(@param('pid",{"_index":394,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuser(pid",{"_index":361,"title":{},"body":{"controllers/UserController.html":{}}}],["hello",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["httpcode",{"_index":377,"title":{},"body":{"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":390,"title":{},"body":{"controllers/UserController.html":{}}}],["httpstatus",{"_index":378,"title":{},"body":{"controllers/UserController.html":{}}}],["id",{"_index":79,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":66,"title":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":179,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(evententity",{"_index":180,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{}}}],["injectrepository(participantentity",{"_index":320,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["injectrepository(userentity",{"_index":321,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["insertevent",{"_index":162,"title":{},"body":{"injectables/EventsService.html":{}}}],["insertevent(event",{"_index":174,"title":{},"body":{"injectables/EventsService.html":{}}}],["installation",{"_index":495,"title":{},"body":{"index.html":{}}}],["installing",{"_index":487,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":497,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":266,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["interface",{"_index":95,"title":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{}},"body":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":97,"title":{},"body":{"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"interfaces/ParticipantInterface.html":{},"interfaces/UserInterface.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":255,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["internalservererrorexception('failed",{"_index":287,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["invitations",{"_index":261,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["invite",{"_index":269,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["invited",{"_index":332,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["inviteparticipant",{"_index":235,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["inviteparticipant(eventid",{"_index":242,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["isglobal",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":227,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["key",{"_index":198,"title":{},"body":{"injectables/EventsService.html":{}}}],["last_name",{"_index":210,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":527,"title":{},"body":{"properties.html":{}}}],["lint",{"_index":513,"title":{},"body":{"index.html":{}}}],["listparticipants",{"_index":236,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["listparticipants(@param('event_id",{"_index":279,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["listparticipants(eventid",{"_index":245,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["literal",{"_index":206,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["location",{"_index":80,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["logged",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":355,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":391,"title":{},"body":{"controllers/UserController.html":{}}}],["login(data",{"_index":364,"title":{},"body":{"controllers/UserController.html":{}}}],["login(email",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginresponse",{"_index":202,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["look",{"_index":295,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["management",{"_index":473,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":226,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":218,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["message",{"_index":205,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":468,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":501,"title":{},"body":{"index.html":{}}}],["models/event.entity",{"_index":156,"title":{},"body":{"modules/EventsModule.html":{},"injectables/EventsService.html":{}}}],["models/event.interface",{"_index":140,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["models/participant.entity",{"_index":302,"title":{},"body":{"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["models/user.entity",{"_index":413,"title":{},"body":{"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["models/user.interface",{"_index":381,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql2",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":112,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":190,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["newparticipant",{"_index":328,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.event",{"_index":329,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.status",{"_index":331,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["newparticipant.user",{"_index":330,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception",{"_index":178,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('event",{"_index":191,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception('participant",{"_index":346,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception('user",{"_index":327,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception(`could",{"_index":194,"title":{},"body":{"injectables/EventsService.html":{}}}],["notfoundexception(`event",{"_index":323,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception(`participant",{"_index":335,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["notfoundexception(e.message",{"_index":267,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["null",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":94,"title":{},"body":{"entities/EventEntity.html":{}}}],["number",{"_index":208,"title":{},"body":{"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":149,"title":{},"body":{"controllers/EventsController.html":{}}}],["observable",{"_index":115,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["ok",{"_index":126,"title":{},"body":{"controllers/EventsController.html":{}}}],["optional",{"_index":113,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":522,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p.status",{"_index":286,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.email",{"_index":285,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.first_name",{"_index":283,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["p.user.last_name",{"_index":284,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["package",{"_index":453,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":134,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["param('event_id",{"_index":258,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["param('id",{"_index":147,"title":{},"body":{"controllers/EventsController.html":{}}}],["param('pid",{"_index":271,"title":{},"body":{"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["partial",{"_index":130,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["participant",{"_index":270,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["participant.controller",{"_index":301,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["participant.service",{"_index":257,"title":{},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{}}}],["participant.status",{"_index":349,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participantentity",{"_index":216,"title":{"entities/ParticipantEntity.html":{}},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["participantinterface",{"_index":230,"title":{"interfaces/ParticipantInterface.html":{}},"body":{"interfaces/ParticipantInterface.html":{},"coverage.html":{}}}],["participantrepository",{"_index":311,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["participants",{"_index":280,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["participants.map((p",{"_index":282,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["participants/participant.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["participantscontroller",{"_index":232,"title":{"controllers/ParticipantsController.html":{}},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"coverage.html":{}}}],["participantsmodule",{"_index":41,"title":{"modules/ParticipantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParticipantsModule.html":{},"modules.html":{},"overview.html":{}}}],["participantsservice",{"_index":256,"title":{"injectables/ParticipantsService.html":{}},"body":{"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"coverage.html":{},"overview.html":{}}}],["participation",{"_index":297,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["password",{"_index":212,"title":{},"body":{"interfaces/LoginResponse.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":135,"title":{},"body":{"controllers/EventsController.html":{}}}],["patch(':id",{"_index":131,"title":{},"body":{"controllers/EventsController.html":{}}}],["pg",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":224,"title":{},"body":{"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["pnpm",{"_index":496,"title":{},"body":{"index.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/EventsController.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["post('events/:event_id/invite",{"_index":243,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["post('login",{"_index":389,"title":{},"body":{"controllers/UserController.html":{}}}],["post('login')@httpcode(httpstatus.ok",{"_index":365,"title":{},"body":{"controllers/UserController.html":{}}}],["post('register",{"_index":368,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":101,"title":{},"body":{"controllers/EventsController.html":{},"controllers/UserController.html":{}}}],["prettier",{"_index":517,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":87,"title":{},"body":{"entities/EventEntity.html":{},"entities/ParticipantEntity.html":{},"entities/UserEntity.html":{}}}],["private",{"_index":181,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["process.env.database_url",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":503,"title":{},"body":{"index.html":{}}}],["promise",{"_index":313,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":76,"title":{"properties.html":{}},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"properties.html":{}}}],["protectlist",{"_index":196,"title":{},"body":{"injectables/EventsService.html":{}}}],["protectlist.foreach((key",{"_index":197,"title":{},"body":{"injectables/EventsService.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["put",{"_index":254,"title":{},"body":{"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["put(':pid",{"_index":371,"title":{},"body":{"controllers/UserController.html":{}}}],["put('updateparticipant/:event_id/:pid",{"_index":249,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["put('updatestatus",{"_index":252,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["reflect",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":356,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["register(@body",{"_index":383,"title":{},"body":{"controllers/UserController.html":{}}}],["register(user",{"_index":367,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["registered",{"_index":388,"title":{},"body":{"controllers/UserController.html":{}}}],["relations",{"_index":348,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["remove",{"_index":124,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent",{"_index":106,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent(@param('id",{"_index":150,"title":{},"body":{"controllers/EventsController.html":{}}}],["removeevent(eventid",{"_index":121,"title":{},"body":{"controllers/EventsController.html":{}}}],["repository",{"_index":165,"title":{},"body":{"injectables/EventsService.html":{},"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":294,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/UsersService.html":{}}}],["result",{"_index":343,"title":{},"body":{"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["result.affected",{"_index":345,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["routes",{"_index":530,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":499,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":137,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{},"dependencies.html":{}}}],["sent",{"_index":262,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["service",{"_index":474,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"modules/EventsModule.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":69,"title":{},"body":{"injectables/AppService.html":{}}}],["src/events/events.controller.ts",{"_index":100,"title":{},"body":{"controllers/EventsController.html":{},"coverage.html":{}}}],["src/events/events.controller.ts:19",{"_index":110,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:24",{"_index":116,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:29",{"_index":119,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:34",{"_index":132,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.controller.ts:49",{"_index":123,"title":{},"body":{"controllers/EventsController.html":{}}}],["src/events/events.module.ts",{"_index":154,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/events.service.ts",{"_index":158,"title":{},"body":{"injectables/EventsService.html":{},"coverage.html":{}}}],["src/events/events.service.ts:15",{"_index":175,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:19",{"_index":173,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:23",{"_index":171,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:36",{"_index":177,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:55",{"_index":169,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/events.service.ts:9",{"_index":166,"title":{},"body":{"injectables/EventsService.html":{}}}],["src/events/models/event.entity",{"_index":228,"title":{},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["src/events/models/event.entity.ts",{"_index":75,"title":{},"body":{"entities/EventEntity.html":{},"coverage.html":{}}}],["src/events/models/event.entity.ts:12",{"_index":84,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:15",{"_index":90,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:18",{"_index":86,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:21",{"_index":89,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:6",{"_index":88,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.entity.ts:9",{"_index":92,"title":{},"body":{"entities/EventEntity.html":{}}}],["src/events/models/event.interface.ts",{"_index":98,"title":{},"body":{"interfaces/EventInterface.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":446,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/participants/models/participant.entity.ts",{"_index":217,"title":{},"body":{"entities/ParticipantEntity.html":{},"coverage.html":{}}}],["src/participants/models/participant.entity.ts:14",{"_index":221,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:18",{"_index":225,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:22",{"_index":220,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.entity.ts:25",{"_index":222,"title":{},"body":{"entities/ParticipantEntity.html":{}}}],["src/participants/models/participant.interface.ts",{"_index":231,"title":{},"body":{"interfaces/ParticipantInterface.html":{},"coverage.html":{}}}],["src/participants/participant.controller.ts",{"_index":233,"title":{},"body":{"controllers/ParticipantsController.html":{},"coverage.html":{}}}],["src/participants/participant.controller.ts:104",{"_index":253,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:19",{"_index":244,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:38",{"_index":250,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:66",{"_index":241,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.controller.ts:84",{"_index":247,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["src/participants/participant.module.ts",{"_index":300,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["src/participants/participant.service.ts",{"_index":304,"title":{},"body":{"injectables/ParticipantsService.html":{},"coverage.html":{}}}],["src/participants/participant.service.ts:105",{"_index":315,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:112",{"_index":319,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:13",{"_index":310,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:23",{"_index":314,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:57",{"_index":317,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/participants/participant.service.ts:94",{"_index":312,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["src/users/models/user.entity",{"_index":229,"title":{},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{}}}],["src/users/models/user.entity.ts",{"_index":401,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/users/models/user.entity.ts:12",{"_index":406,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:15",{"_index":403,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:18",{"_index":407,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:6",{"_index":405,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.entity.ts:9",{"_index":404,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/users/models/user.interface.ts",{"_index":203,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["src/users/user.controller.ts",{"_index":352,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/users/user.controller.ts:25",{"_index":369,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:35",{"_index":366,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:41",{"_index":363,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:48",{"_index":372,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.controller.ts:57",{"_index":360,"title":{},"body":{"controllers/UserController.html":{}}}],["src/users/user.module.ts",{"_index":411,"title":{},"body":{"modules/UserModule.html":{}}}],["src/users/user.service.ts",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/user.service.ts:15",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:24",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:44",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:48",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:59",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.service.ts:9",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":481,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":502,"title":{},"body":{"index.html":{}}}],["start:prodbuild",{"_index":504,"title":{},"body":{"index.html":{}}}],["start_time",{"_index":81,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["started",{"_index":472,"title":{"index.html":{}},"body":{}}],["statements",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":128,"title":{},"body":{"controllers/EventsController.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["success",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["successfully",{"_index":263,"title":{},"body":{"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["sudo",{"_index":489,"title":{},"body":{"index.html":{}}}],["support",{"_index":519,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":520,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":493,"title":{},"body":{"index.html":{}}}],["synchronize",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":508,"title":{},"body":{"index.html":{}}}],["test:covlinting",{"_index":511,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":510,"title":{},"body":{"index.html":{}}}],["tests",{"_index":507,"title":{},"body":{"index.html":{}}}],["thank",{"_index":293,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.eventrepository.findone",{"_index":322,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.eventrepostitory.delete(eventid",{"_index":201,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepostitory.find",{"_index":186,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventrepostitory.update(eventid",{"_index":200,"title":{},"body":{"injectables/EventsService.html":{}}}],["this.eventsservice.deleteevent(eventid",{"_index":151,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.getevents",{"_index":144,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.insertevent(event",{"_index":143,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.eventsservice.updateevent(eventid",{"_index":148,"title":{},"body":{"controllers/EventsController.html":{}}}],["this.participantrepository.delete",{"_index":344,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.find",{"_index":347,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.findone",{"_index":334,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.save(newparticipant",{"_index":333,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantrepository.save(participant",{"_index":350,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.participantsservice.deleteparticipant(eventid",{"_index":278,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.inviteparticipant(eventid",{"_index":260,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.listparticipants(eventid",{"_index":281,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.updateparticipant",{"_index":273,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.participantsservice.updatestatus(eventid",{"_index":292,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["this.userrepository.delete(id",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":325,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(founduser",{"_index":342,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["this.userrepository.save(user",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.deleteuser(pid",{"_index":400,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.getuser(pid",{"_index":395,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.login(data.email",{"_index":392,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.register(user",{"_index":384,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.updateuser(pid",{"_index":396,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":189,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{}}}],["title",{"_index":82,"title":{},"body":{"entities/EventEntity.html":{},"interfaces/EventInterface.html":{}}}],["token",{"_index":214,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["true",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"entities/EventEntity.html":{},"controllers/EventsController.html":{},"entities/UserEntity.html":{}}}],["try",{"_index":259,"title":{},"body":{"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{}}}],["type",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"entities/EventEntity.html":{},"interfaces/EventInterface.html":{},"controllers/EventsController.html":{},"injectables/EventsService.html":{},"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"interfaces/ParticipantInterface.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":93,"title":{},"body":{"entities/EventEntity.html":{},"injectables/EventsService.html":{},"entities/ParticipantEntity.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([evententity",{"_index":157,"title":{},"body":{"modules/EventsModule.html":{}}}],["typeormmodule.forfeature([participantentity",{"_index":303,"title":{},"body":{"modules/ParticipantsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":414,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["unauthorizedexception",{"_index":374,"title":{},"body":{"controllers/UserController.html":{}}}],["unique",{"_index":408,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":506,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":172,"title":{},"body":{"injectables/EventsService.html":{},"controllers/ParticipantsController.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":528,"title":{},"body":{"properties.html":{}}}],["up",{"_index":490,"title":{},"body":{"index.html":{}}}],["update",{"_index":277,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updated",{"_index":397,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedevent",{"_index":176,"title":{},"body":{"injectables/EventsService.html":{}}}],["updatedevent[key",{"_index":199,"title":{},"body":{"injectables/EventsService.html":{}}}],["updateduser",{"_index":272,"title":{},"body":{"controllers/ParticipantsController.html":{},"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateduser.email",{"_index":276,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateduser.first_name",{"_index":274,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateduser.last_name",{"_index":275,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateevent",{"_index":107,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["updateevent(eventid",{"_index":129,"title":{},"body":{"controllers/EventsController.html":{},"injectables/EventsService.html":{}}}],["updateparticipant",{"_index":305,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateparticipant(eventid",{"_index":316,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateparticipantdetails",{"_index":237,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantdetails(eventid",{"_index":248,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantstatus",{"_index":238,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updateparticipantstatus(eventid",{"_index":251,"title":{},"body":{"controllers/ParticipantsController.html":{}}}],["updatestatus",{"_index":306,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updatestatus(eventid",{"_index":318,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["updateuser",{"_index":357,"title":{},"body":{"controllers/UserController.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(pid",{"_index":370,"title":{},"body":{"controllers/UserController.html":{}}}],["url",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":483,"title":{},"body":{"index.html":{}}}],["user",{"_index":213,"title":{},"body":{"interfaces/LoginResponse.html":{},"entities/ParticipantEntity.html":{},"controllers/ParticipantsController.html":{},"injectables/ParticipantsService.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{}}}],["user.controller",{"_index":412,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":326,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["user.first_name",{"_index":338,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["user.last_name",{"_index":340,"title":{},"body":{"injectables/ParticipantsService.html":{}}}],["user.service",{"_index":380,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":351,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdata",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["userentity",{"_index":223,"title":{"entities/UserEntity.html":{}},"body":{"entities/ParticipantEntity.html":{},"modules/ParticipantsModule.html":{},"injectables/ParticipantsService.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userinterface",{"_index":207,"title":{"interfaces/UserInterface.html":{}},"body":{"interfaces/LoginResponse.html":{},"controllers/UserController.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usermodule",{"_index":42,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepository",{"_index":308,"title":{},"body":{"injectables/ParticipantsService.html":{},"injectables/UsersService.html":{}}}],["users/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["usersservice",{"_index":379,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["version",{"_index":525,"title":{},"body":{"properties.html":{}}}],["void",{"_index":170,"title":{},"body":{"injectables/EventsService.html":{}}}],["watch",{"_index":500,"title":{},"body":{"index.html":{}}}],["without",{"_index":486,"title":{},"body":{"index.html":{}}}],["world",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/ParticipantsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EventsModule\n                        \n                        \n                            ParticipantsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { EventsModule } from './events/events.module';\nimport { UserModule } from './users/user.module';\nimport { ParticipantsModule } from './participants/participant.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    EventsModule,\n    UserModule,\n    ParticipantsModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      autoLoadEntities: true,\n      synchronize: true,\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventEntity.html":{"url":"entities/EventEntity.html","title":"entity - EventEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                desc\n                            \n                            \n                                    \n                                end_time\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                location\n                            \n                            \n                                    \n                                start_time\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        start_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/models/event.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class EventEntity {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column({ nullable: true })\n  desc: string;\n\n  @Column({ nullable: true })\n  start_time: Date;\n\n  @Column({ nullable: true })\n  end_time: Date;\n\n  @Column({ nullable: true })\n  location: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EventInterface.html":{"url":"interfaces/EventInterface.html","title":"interface - EventInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EventInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/models/event.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            desc\n                                        \n                                \n                                \n                                        \n                                            end_time\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                                \n                                        \n                                            start_time\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        desc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        desc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        end_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start_time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        start_time:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EventInterface {\n  id: string;\n  title: string;\n  desc: string;\n  start_time: Date;\n  end_time: Date;\n  location: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventsController.html":{"url":"controllers/EventsController.html","title":"controller - EventsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                events\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createEvent\n                            \n                            \n                                    \n                                getAllEvents\n                            \n                            \n                                    \n                                getEvent\n                            \n                            \n                                    \n                                removeEvent\n                            \n                            \n                                    \n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEvent(event: EventInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            EventInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllEvents\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllEvents()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeEvent(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Remove Event by EventID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event id\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { ok: boolean; }\n\n                        \n                            \n                                status\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateEvent(eventId: string, event: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/events/events.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                event\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { ok: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Param,\n  Patch,\n  Delete,\n} from '@nestjs/common';\nimport { from, Observable } from 'rxjs';\nimport { EventsService } from './events.service';\nimport { EventInterface } from './models/event.interface';\n\n@Controller('events')\nexport class EventsController {\n  constructor(private eventsService: EventsService) {}\n\n  @Post()\n  createEvent(@Body() event: EventInterface): Observable {\n    return this.eventsService.insertEvent(event);\n  }\n\n  @Get()\n  getAllEvents(): Observable {\n    return this.eventsService.getEvents();\n  }\n\n  @Get(':id')\n  getEvent(@Param('id') eventId: string): Observable {\n    return from(this.eventsService.getEvent(eventId));\n  }\n\n  @Patch(':id')\n  updateEvent(\n    @Param('id') eventId: string,\n    @Body() event: Partial,\n  ) {\n    this.eventsService.updateEvent(eventId, event);\n    return {\n      ok: true,\n    };\n  }\n  /**\n   * Remove Event by EventID\n   * @param {string} eventId The event id\n   * @returns {Object} status\n   */\n  @Delete(':id')\n  removeEvent(@Param('id') eventId: string) {\n    this.eventsService.deleteEvent(eventId);\n    return {\n      ok: true,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\n\nEventsService\n\nEventsService\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventsController } from './events.controller';\nimport { EventsService } from './events.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EventEntity } from './models/event.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([EventEntity])],\n  controllers: [EventsController],\n  providers: [EventsService],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventsService.html":{"url":"injectables/EventsService.html","title":"injectable - EventsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteEvent\n                            \n                            \n                                    Async\n                                getEvent\n                            \n                            \n                                getEvents\n                            \n                            \n                                insertEvent\n                            \n                            \n                                updateEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventRepostitory: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventRepostitory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \ndeleteEvent(eventID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getEvent(eventID: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEvents\n                        \n                    \n                \n            \n            \n                \ngetEvents()\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insertEvent\n                        \n                    \n                \n            \n            \n                \ninsertEvent(event: EventInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            EventInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateEvent\n                        \n                    \n                \n            \n            \n                \nupdateEvent(eventID: string, updatedEvent: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/events/events.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventID\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedEvent\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { EventEntity } from './models/event.entity';\nimport { EventInterface } from './models/event.interface';\nimport { from, Observable } from 'rxjs';\n\n@Injectable()\nexport class EventsService {\n  constructor(\n    @InjectRepository(EventEntity)\n    private eventRepostitory: Repository,\n  ) {}\n\n  insertEvent(event: EventInterface): Observable {\n    return from(this.eventRepostitory.save(event));\n  }\n\n  getEvents(): Observable {\n    return from(this.eventRepostitory.find());\n  }\n\n  async getEvent(eventID: string) {\n    const events = await this.eventRepostitory.find({\n      where: {\n        id: eventID,\n      },\n    });\n    if (events.length === 0) {\n      throw new NotFoundException('Event Not Found.');\n    }\n\n    return events[0];\n  }\n\n  updateEvent(eventID: string, updatedEvent: Partial) {\n    const event = this.eventRepostitory.find({\n      where: {\n        id: eventID,\n      },\n    });\n    if (!event) {\n      throw new NotFoundException(`Could not find event: ${eventID}.`);\n    }\n\n    const protectList = ['id'];\n    protectList.forEach((key) => {\n      if (key in updatedEvent) {\n        delete updatedEvent[key];\n      }\n    });\n    this.eventRepostitory.update(eventID, updatedEvent);\n  }\n\n  deleteEvent(eventID: string) {\n    this.eventRepostitory.delete(eventID);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInterface {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  status: string;\n  message: string;\n  data: {\n    user: {\n      id: number;\n      first_name: string;\n      last_name: string;\n      email: string;\n    };\n    token: string;\n    expires_in: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ParticipantEntity.html":{"url":"entities/ParticipantEntity.html","title":"entity - ParticipantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ParticipantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/models/participant.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                event\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'event_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'pid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/participants/models/participant.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { EventEntity } from 'src/events/models/event.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\n\n@Entity()\nexport class ParticipantEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'pid' })\n  user: UserEntity;\n\n  @ManyToOne(() => EventEntity)\n  @JoinColumn({ name: 'event_id' })\n  event: EventEntity;\n\n  @Column()\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParticipantInterface.html":{"url":"interfaces/ParticipantInterface.html","title":"interface - ParticipantInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParticipantInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/models/participant.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            event_id\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            pid\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        event_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pid:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ParticipantInterface {\n  id: number;\n  pid: number;\n  event_id: number;\n  status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ParticipantsController.html":{"url":"controllers/ParticipantsController.html","title":"controller - ParticipantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ParticipantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participant.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteParticipant\n                            \n                            \n                                    \n                                    Async\n                                inviteParticipant\n                            \n                            \n                                    \n                                    Async\n                                listParticipants\n                            \n                            \n                                    \n                                    Async\n                                updateParticipantDetails\n                            \n                            \n                                    \n                                    Async\n                                updateParticipantStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteParticipant(eventId: string, pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('deleteParticipant/:event_id/:pid')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        inviteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    inviteParticipant(eventId: string, user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('events/:event_id/invite')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        listParticipants\n                        \n                    \n                \n            \n            \n                \n                        \n                    listParticipants(eventId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('events/:event_id/participants')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateParticipantDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipantDetails(eventId: string, pid: number, user: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('updateParticipant/:event_id/:pid')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateParticipantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipantStatus(eventId: string, pid: number, status: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('updateStatus')\n                \n            \n\n                    \n                        \n                            Defined in src/participants/participant.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Put,\n  Delete,\n  Get,\n  Param,\n  Body,\n  NotFoundException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { ParticipantsService } from './participant.service';\n\n@Controller()\nexport class ParticipantsController {\n  constructor(private readonly participantsService: ParticipantsService) {}\n\n  @Post('events/:event_id/invite')\n  async inviteParticipant(\n    @Param('event_id') eventId: string,\n    @Body() user: { first_name: string; last_name: string; email: string },\n  ) {\n    try {\n      await this.participantsService.inviteParticipant(eventId, user);\n      return { message: 'Invitations sent successfully.' };\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to invite the participant',\n        );\n      }\n    }\n  }\n\n  @Put('updateParticipant/:event_id/:pid')\n  async updateParticipantDetails(\n    @Param('event_id') eventId: string,\n    @Param('pid') pid: number,\n    @Body() user: { first_name: string; last_name: string; email: string },\n  ) {\n    try {\n      const updatedUser = await this.participantsService.updateParticipant(\n        eventId,\n        pid,\n        user,\n      );\n      return {\n        first_name: updatedUser.first_name,\n        last_name: updatedUser.last_name,\n        email: updatedUser.email,\n      };\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to update the participant',\n        );\n      }\n    }\n  }\n\n  @Delete('deleteParticipant/:event_id/:pid')\n  async deleteParticipant(\n    @Param('event_id') eventId: string,\n    @Param('pid') pid: number,\n  ) {\n    try {\n      await this.participantsService.deleteParticipant(eventId, pid);\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException(\n          'Failed to delete the participant',\n        );\n      }\n    }\n  }\n\n  @Get('events/:event_id/participants')\n  async listParticipants(@Param('event_id') eventId: string) {\n    try {\n      const participants =\n        await this.participantsService.listParticipants(eventId);\n      return participants.map((p) => ({\n        first_name: p.user.first_name,\n        last_name: p.user.last_name,\n        email: p.user.email,\n        status: p.status,\n      }));\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException('Failed to fetch participants');\n      }\n    }\n  }\n\n  @Put('updateStatus')\n  async updateParticipantStatus(\n    @Body('event_id') eventId: string,\n    @Body('pid') pid: number,\n    @Body('status') status: string,\n  ) {\n    try {\n      await this.participantsService.updateStatus(eventId, pid, status);\n      return {\n        message:\n          'Thank you for your response. We look forward to your participation!',\n      };\n    } catch (e) {\n      if (e instanceof NotFoundException) {\n        throw new NotFoundException(e.message);\n      } else {\n        throw new InternalServerErrorException('Failed to update the status');\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParticipantsModule.html":{"url":"modules/ParticipantsModule.html","title":"module - ParticipantsModule","body":"\n                   \n\n\n\n\n    Modules\n    ParticipantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\n\nParticipantsService\n\nParticipantsService\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/participants/participant.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParticipantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ParticipantsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ParticipantsController } from './participant.controller';\nimport { ParticipantsService } from './participant.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ParticipantEntity } from './models/participant.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\nimport { EventEntity } from 'src/events/models/event.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ParticipantEntity, UserEntity, EventEntity]),\n  ],\n  controllers: [ParticipantsController],\n  providers: [ParticipantsService],\n})\nexport class ParticipantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParticipantsService.html":{"url":"injectables/ParticipantsService.html","title":"injectable - ParticipantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParticipantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/participants/participant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteParticipant\n                            \n                            \n                                    Async\n                                inviteParticipant\n                            \n                            \n                                    Async\n                                listParticipants\n                            \n                            \n                                    Async\n                                updateParticipant\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(participantRepository: Repository, userRepository: Repository, eventRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/participants/participant.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        participantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteParticipant(eventId: string, pid: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        inviteParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    inviteParticipant(eventId: string, user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listParticipants\n                        \n                    \n                \n            \n            \n                \n                        \n                    listParticipants(eventId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateParticipant\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateParticipant(eventId: string, pid: number, user: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(eventId: string, pid: number, status: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/participants/participant.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                eventId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ParticipantEntity } from './models/participant.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\nimport { EventEntity } from 'src/events/models/event.entity';\n\n@Injectable()\nexport class ParticipantsService {\n  constructor(\n    @InjectRepository(ParticipantEntity)\n    private participantRepository: Repository,\n    @InjectRepository(UserEntity)\n    private userRepository: Repository,\n    @InjectRepository(EventEntity)\n    private readonly eventRepository: Repository,\n  ) {}\n\n  async inviteParticipant(\n    eventId: string,\n    user: { first_name: string; last_name: string; email: string },\n  ): Promise {\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n    });\n\n    if (!event) {\n      throw new NotFoundException(`Event not found`);\n    }\n\n    const foundUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n\n    if (!foundUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    const newParticipant = new ParticipantEntity();\n    newParticipant.event = event;\n    newParticipant.user = foundUser;\n    newParticipant.status = 'invited';\n\n    try {\n      await this.participantRepository.save(newParticipant);\n    } catch (e) {\n      throw new InternalServerErrorException(\n        'Failed to invite the participant',\n      );\n    }\n  }\n\n  async updateParticipant(\n    eventId: string,\n    pid: number,\n    user: { first_name: string; last_name: string; email: string },\n  ): Promise {\n    const event = await this.eventRepository.findOne({\n      where: { id: eventId },\n    });\n\n    if (!event) {\n      throw new NotFoundException(`Event not found`);\n    }\n\n    const participant = await this.participantRepository.findOne({\n      where: {\n        user: { id: pid },\n        event: { id: eventId },\n      },\n    });\n\n    if (!participant) {\n      throw new NotFoundException(`Participant not associated with this event`);\n    }\n\n    const foundUser = await this.userRepository.findOne({ where: { id: pid } });\n\n    if (!foundUser) {\n      throw new NotFoundException('User not found');\n    }\n\n    foundUser.first_name = user.first_name;\n    foundUser.last_name = user.last_name;\n    foundUser.email = user.email;\n\n    return await this.userRepository.save(foundUser);\n  }\n\n  async deleteParticipant(eventId: string, pid: number): Promise {\n    const result = await this.participantRepository.delete({\n      user: { id: pid },\n      event: { id: eventId },\n    });\n\n    if (result.affected === 0) {\n      throw new NotFoundException('Participant not found');\n    }\n  }\n\n  async listParticipants(eventId: string): Promise {\n    return await this.participantRepository.find({\n      where: { event: { id: eventId } },\n      relations: ['user'],\n    });\n  }\n\n  async updateStatus(\n    eventId: string,\n    pid: number,\n    status: string,\n  ): Promise {\n    const participant = await this.participantRepository.findOne({\n      where: { user: { id: pid }, event: { id: eventId } },\n    });\n\n    if (!participant) {\n      throw new NotFoundException('Participant not found');\n    }\n\n    participant.status = status;\n\n    await this.participantRepository.save(participant);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(pid: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: UserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(pid: number, user: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':pid')\n                \n            \n\n                    \n                        \n                            Defined in src/users/user.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pid\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Get,\n  Param,\n  Put,\n  Delete,\n  BadRequestException,\n  UnauthorizedException,\n  ConflictException,\n  ForbiddenException,\n  NotFoundException,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UsersService } from './user.service';\nimport { UserInterface } from './models/user.interface';\n\n@Controller('user')\nexport class UserController {\n  constructor(private usersService: UsersService) {}\n\n  @Post('register')\n  async register(@Body() user: UserInterface) {\n    const result = await this.usersService.register(user);\n    if (!result) {\n      throw new ConflictException('Email already exists');\n    }\n    return { message: 'User registered successfully' };\n  }\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(@Body() data: { email: string; password: string }) {\n    const result = await this.usersService.login(data.email, data.password);\n    return result;\n  }\n\n  @Get(':pid')\n  async getUser(@Param('pid') pid: number) {\n    const user = await this.usersService.getUser(pid);\n    const { password, ...result } = user;\n    return result;\n  }\n\n  @Put(':pid')\n  async updateUser(\n    @Param('pid') pid: number,\n    @Body() user: Partial,\n  ) {\n    const updatedUser = await this.usersService.updateUser(pid, user);\n    return { message: 'User updated successfully' };\n  }\n\n  @Delete(':pid')\n  async deleteUser(@Param('pid') pid: number) {\n    const deleted = await this.usersService.deleteUser(pid);\n    return { message: 'User deleted successfully' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                first_name\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                last_name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/models/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  first_name: string;\n\n  @Column()\n  last_name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            first_name\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            last_name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        first_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserInterface {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  status: string;\n  message: string;\n  data: {\n    user: {\n      id: number;\n      first_name: string;\n      last_name: string;\n      email: string;\n    };\n    token: string;\n    expires_in: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UserController } from './user.controller';\nimport { UsersService } from './user.service';\nimport { UserEntity } from './models/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  controllers: [UserController],\n  providers: [UsersService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: UserInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: number, updatedUser: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updatedUser\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from './models/user.entity';\nimport { UserInterface } from './models/user.interface';\nimport { LoginResponse } from './models/user.interface';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepository: Repository,\n  ) {}\n\n  async register(user: UserInterface): Promise {\n    const existUser = await this.userRepository.findOne({\n      where: { email: user.email },\n    });\n    if (existUser) return null;\n\n    return this.userRepository.save(user);\n  }\n\n  async login(email: string, password: string): Promise {\n    const user = await this.userRepository.findOne({\n      where: { email, password },\n    });\n    if (user) {\n      const { password, ...userData } = user;\n      const response: LoginResponse = {\n        status: 'success',\n        message: 'Logged in successfully',\n        data: {\n          user: userData,\n          token: 'alnlgsnsoajg',\n          expires_in: 3600,\n        },\n      };\n      return response;\n    }\n    return null;\n  }\n\n  async getUser(id: number): Promise {\n    return this.userRepository.findOne({ where: { id } });\n  }\n\n  async updateUser(\n    id: number,\n    updatedUser: Partial,\n  ): Promise {\n    const user = await this.userRepository.findOne({ where: { id } });\n    if (!user) return null;\n\n    await this.userRepository.update(id, updatedUser);\n    return this.userRepository.findOne({ where: { id } });\n  }\n\n  async deleteUser(id: number): Promise {\n    const result = await this.userRepository.delete(id);\n    return result.affected > 0;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/events/events.controller.ts\n            \n            controller\n            EventsController\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/events/events.service.ts\n            \n            injectable\n            EventsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/events/models/event.entity.ts\n            \n            entity\n            EventEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/models/event.interface.ts\n            \n            interface\n            EventInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/models/participant.entity.ts\n            \n            entity\n            ParticipantEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/participants/models/participant.interface.ts\n            \n            interface\n            ParticipantInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/participants/participant.controller.ts\n            \n            controller\n            ParticipantsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/participants/participant.service.ts\n            \n            injectable\n            ParticipantsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            UserInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/typeorm : ^10.0.0\n        \n            mysql2 : ^3.6.1\n        \n            pg : ^8.11.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.17\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEvent Management Service\nDescription\nA a backend service for event management that facilitates the creation, management, and eventual automatic deletion of events.\nStart Docker\nWe use docker for our service, you can use docker-compose to start the service in dev module without installing the dependencies.\nExample :$ sudo docker-compose up --build\nAPI Documentation\nSwagger API Docmentation\nInstallation\nExample :$ pnpm installRunning the service\nExample :# development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prodBuild the service\nExample :# development\n$ pnpm buildTest\nExample :# unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:covLinting and formatting\nExample :# Lint and autofix with eslint\n$ pnpm run lint\n\n# Format with prettier\n$ pnpm run format\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParticipantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_providers\n\n\n\ncluster_ParticipantsModule\n\n\n\ncluster_ParticipantsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nEventsModule\n\nEventsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nParticipantsModule\n\nParticipantsModule\n\nAppModule -->\n\nParticipantsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEventsService\n\nEventsService\n\nEventsModule -->\n\nEventsService->EventsModule\n\n\n\n\n\nParticipantsService\n\nParticipantsService\n\nParticipantsModule -->\n\nParticipantsService->ParticipantsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUserModule -->\n\nUsersService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
